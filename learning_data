# Sensor Game Hub v6.0 개발자 문서 (RAG 학습용)

이 문서는 Sensor Game Hub v6.0 플랫폼에서 게임을 개발하는 개발자를 위한 종합 가이드입니다. AI 챗봇이 개발자의 질문에 정확하고 상세하게 답변할 수 있도록 모든 관련 정보를 통합 및 정리합니다.

---

## 1. 프로젝트 개요

**프로젝트명**: Sensor Game Hub v6.0
**설명**: 완벽한 게임별 독립 세션 시스템을 갖춘 모바일 센서 기반 게임 플랫폼. 모바일 기기의 센서 데이터를 활용하여 게임을 플레이합니다.
**주요 기능**:
*   **게임별 독립 세션 시스템**: 게임 진입 시 4자리 세션 코드 자동 생성, QR 코드 지원, 실시간 상태 관리.
*   **통합 센서 클라이언트**: 하나의 센서 클라이언트로 모든 게임 타입 지원, 자동 센서 감지 및 권한 처리, 50ms 간격 고속 센서 데이터 전송.
*   **다양한 게임 컬렉션**: 솔로, 듀얼, 멀티플레이어 게임 지원.
**기술 스택**:
*   **Backend**: Node.js, Express, Socket.IO
*   **Frontend**: HTML5, Canvas API, WebSockets
*   **Sensors**: DeviceMotion API, DeviceOrientation API
*   **Real-time**: Socket.IO 기반 실시간 통신
*   **QR Codes**: QRCode.js 라이브러리
**아키텍처**:
*   `server/index.js`: 메인 게임 서버 (Express + Socket.IO)
*   `server/SessionManager.js`: 세션 관리 시스템
*   `server/GameScanner.js`: 게임 자동 스캔 및 관리
*   `public/js/SessionSDK.js`: 통합 SDK (QR코드, 센서 수집기 포함)
*   `public/sensor.html`: 통합 센서 클라이언트
*   `public/games/`: 각 게임 폴더 (예: `solo/`, `dual/`, `multi/`, `shot-target/`)

---

## 2. 게임 개발 워크플로우

개발자는 `public/games/` 폴더 아래에 새로운 게임 폴더를 생성하고, `index.html` 및 `game.json` 파일을 추가하여 게임을 허브에 등록할 수 있습니다.

### 2.1. 빠른 시작: 게임 템플릿 사용
가장 쉬운 방법은 제공된 `GAME_TEMPLATE.html`을 복사하여 사용하는 것입니다.

1.  **템플릿 복사**:
    ```bash
    cp GAME_TEMPLATE.html public/games/my-new-game/index.html
    ```
2.  **게임 정보 수정**: `index.html` 내에서 `gameId` 및 게임 제목을 수정합니다.
    ```javascript
    // SessionSDK 초기화 시 gameId를 폴더명과 동일하게 설정
    this.sdk = new SessionSDK({
        gameId: 'my-new-game', // 게임 폴더명과 동일하게
        gameType: 'solo',      // 'solo', 'dual', 'multi' 중 선택
        debug: true
    });
    ```
    ```html
    <!-- 게임 제목 수정 -->
    <div class="session-title">🎮 My New Game</div>
    ```
3.  **게임 로직 구현**:
    *   `update()` 함수: 게임 로직 업데이트
    *   `render()` 함수: 화면 그리기
    *   `processSensorData()` 함수: 센서 데이터 처리

### 2.2. 수동 게임 추가 방법

1.  **게임 폴더 생성**:
    ```bash
    mkdir public/games/my-awesome-game
    cd public/games/my-awesome-game
    ```
2.  **필수 파일 생성**:
    *   `index.html`: 게임의 메인 HTML 파일. `SessionSDK` 및 `socket.io.js`를 로드해야 합니다.
        ```html
        <!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>My Awesome Game</title>
        </head>
        <body>
            <div id="gameContainer">
                <!-- 게임 UI -->
            </div>

            <!-- SessionSDK 로드 -->
            <script src="/socket.io/socket.io.js"></script>
            <script src="/js/SessionSDK.js"></script>

            <script>
                // 게임 코드
                const game = new MyAwesomeGame();
            </script>
        </body>
        </html>
        ```
    *   `game.json` (선택사항): 게임의 메타데이터를 정의합니다. 이 파일이 없으면 기본값이 사용됩니다.
        ```json
        {
          "id": "my-awesome-game",
          "title": "My Awesome Game",
          "description": "놀라운 센서 게임입니다!<br>모바일을 기울여서 플레이하세요",
          "category": "solo",
          "icon": "🎯",
          "version": "1.0.0",
          "author": "Your Name",
          "sensors": ["orientation", "motion"],
          "maxPlayers": 1,
          "difficulty": "medium",
          "status": "active",
          "featured": false,
          "tags": ["fun", "sensor", "tilt"],
          "instructions": [
            "모바일을 기울여서 캐릭터를 조작하세요",
            "목표물을 수집하여 점수를 획득하세요"
          ],
          "controls": {
            "tilt": "캐릭터 이동",
            "motion": "특수 동작"
          }
        }
        ```
3.  **서버 재시작 또는 재스캔**:
    *   **방법 1 (서버 재시작)**: `npm restart`
    *   **방법 2 (API로 재스캔)**: 서버 실행 중 `curl -X POST http://localhost:3000/api/admin/rescan` 요청.
4.  **확인**: `http://localhost:3000`에 접속하여 새 게임이 목록에 표시되고 정상 작동하는지 확인합니다.

---

## 3. 게임 메타데이터 (`game.json`)

`game.json` 파일은 게임의 정보를 정의하며, 허브 페이지에 게임을 표시하고 관리하는 데 사용됩니다.

### 3.1. 필수 필드

| 필드        | 타입   | 설명                                     |
| ----------- | ------ | ---------------------------------------- |
| `id`        | string | 게임 고유 ID (폴더명과 동일해야 함)     |
| `title`     | string | 게임 제목                                |
| `description` | string | 게임 설명 (HTML 태그 허용)               |
| `category`  | string | 게임 카테고리 (`solo`, `dual`, `multi`, `experimental`) |
| `icon`      | string | 게임 아이콘 (이모지 사용 권장)           |

### 3.2. 선택 필드

| 필드           | 타입    | 기본값      | 설명                                     |
| -------------- | ------- | ----------- | ---------------------------------------- |
| `version`      | string  | "1.0.0"     | 게임 버전                                |
| `author`       | string  | "Unknown"   | 개발자명                                 |
| `sensors`      | array   | `["orientation"]` | 게임에서 사용하는 센서 타입 (예: `orientation`, `motion`) |
| `maxPlayers`   | number  | 1           | 최대 플레이어 수                         |
| `difficulty`   | string  | "medium"    | 난이도 (`easy`, `medium`, `hard`)        |
| `status`       | string  | "active"    | 게임 상태 (`active`, `inactive`, `maintenance`) |
| `featured`     | boolean | `false`     | 허브 페이지에 추천 게임으로 표시할지 여부 |
| `experimental` | boolean | `false`     | 실험적 게임으로 표시할지 여부            |
| `tags`         | array   | `[]`        | 태그 목록                                |
| `instructions` | array   | `[]`        | 게임 플레이 방법 설명                    |
| `controls`     | object  | `{}`        | 조작법 설명                              |

### 3.3. 카테고리별 특징

*   **solo**: 1명 플레이, 단일 센서 사용.
*   **dual**: 2명 협력 플레이, 두 개의 센서 사용.
*   **multi**: 3-8명 경쟁 플레이, 여러 개의 센서 사용, 실시간 동기화 중요.
*   **experimental**: 개발 중이거나 실험적인 기능이 포함된 게임.

---

## 4. SessionSDK 사용법

`SessionSDK.js`는 게임과 서버 간의 통신을 담당하는 핵심 SDK입니다.

### 4.1. SDK 초기화

```javascript
// SDK 초기화
const sdk = new SessionSDK({
    gameId: 'my-game',        // game.json의 id 필드와 동일하게 설정
    gameType: 'solo',         // 'solo', 'dual', 'multi' 중 선택
    serverUrl: window.location.origin, // 서버 URL (기본값: 현재 도메인)
    autoReconnect: true,      // 자동 재연결 여부
    debug: true               // 디버그 로그 활성화
});
```

### 4.2. 이벤트 처리 (매우 중요!)

`SessionSDK`는 `CustomEvent`를 사용하여 이벤트를 발생시킵니다. 따라서 이벤트 핸들러에서는 `event.detail || event` 패턴을 사용하여 실제 데이터를 추출해야 합니다.

```javascript
// ✅ 중요: 서버 연결 완료 후 세션 생성
// 'connected' 이벤트는 SDK가 서버에 성공적으로 연결되었을 때 발생합니다.
sdk.on('connected', () => {
    console.log('✅ 서버 연결 완료, 세션 생성 중...');
    this.createSession(); // 연결 완료 후 세션 생성 함수 호출
});

// ✅ 중요: 세션 생성 이벤트 처리
// 'session-created' 이벤트는 게임 세션이 성공적으로 생성되었을 때 발생합니다.
sdk.on('session-created', (event) => {
    const session = event.detail || event;  // 필수 패턴!
    console.log('세션 생성됨:', session);
    this.displaySessionInfo(session); // 세션 정보를 UI에 표시하는 함수 호출
});

// ✅ 중요: 센서 연결 이벤트 처리
// 'sensor-connected' 이벤트는 모바일 센서 클라이언트가 게임 세션에 연결되었을 때 발생합니다.
sdk.on('sensor-connected', (event) => {
    const data = event.detail || event;     // 필수 패턴!
    console.log('센서 연결됨:', data.sensorId);
    this.onSensorConnected(data); // 센서 연결 시 로직 처리
});

// ✅ 중요: 센서 데이터 수신 이벤트 처리
// 'sensor-data' 이벤트는 모바일 센서에서 전송된 데이터가 수신될 때 발생합니다.
sdk.on('sensor-data', (event) => {
    const data = event.detail || event;     // 필수 패턴!
    this.processSensorData(data); // 센서 데이터 처리 함수 호출
});

// ✅ 중요: 게임 준비 완료 이벤트 처리
// 'game-ready' 이벤트는 게임 시작에 필요한 모든 센서가 연결되었을 때 발생합니다.
sdk.on('game-ready', (event) => {
    const data = event.detail || event;     // 필수 패턴!
    console.log('게임 준비 완료');
    this.startGame(); // 게임 시작 함수 호출
});

// 센서 연결 해제 이벤트 처리
sdk.on('sensor-disconnected', (event) => {
    const data = event.detail || event;     // 필수 패턴!
    console.log('센서 연결 해제:', data.sensorId);
});

// 호스트 연결 해제 이벤트 처리 (센서 클라이언트에서 발생)
sdk.on('host-disconnected', (event) => {
    const data = event.detail || event;
    console.log('🖥️ 호스트 연결 해제:', data);
    // 사용자에게 호스트 연결이 끊어졌음을 알리고 재연결 유도
});

// 센서 오류 이벤트 처리
sdk.on('sensor-error', (event) => {
    const data = event.detail || event;
    console.error('❌ 센서 오류:', data);
});
```

### 4.3. 주요 SDK 메서드

*   `sdk.createSession()`: 게임 세션을 생성하고 세션 코드 및 관련 정보를 반환합니다. `connected` 이벤트 이후에 호출해야 합니다.
*   `sdk.connectSensor(sessionCode, deviceInfo)`: (모바일 센서 클라이언트에서 사용) 특정 세션 코드로 게임에 연결합니다.
*   `sdk.sendSensorData(sensorData)`: (모바일 센서 클라이언트에서 사용) 센서 데이터를 서버로 전송합니다.
*   `sdk.startGame()`: 게임 시작을 서버에 알립니다. 모든 센서가 연결된 후 호출할 수 있습니다.
*   `sdk.getSession()`: 현재 세션 정보를 반환합니다.
*   `sdk.isConnected()`: 서버 연결 상태를 반환합니다.
*   `sdk.ping()`: 서버와의 지연 시간을 측정합니다.
*   `sdk.disconnect()`: 서버와의 연결을 해제합니다.
*   `sdk.destroy()`: SDK 인스턴스를 정리하고 모든 이벤트 리스너를 제거합니다.

---

## 5. 센서 데이터 구조 및 처리

모바일 기기에서 전송되는 센서 데이터는 다음과 같은 구조를 가집니다.

### 5.1. 센서 데이터 구조

```javascript
{
    sensorId: "sensor",           // 센서 클라이언트의 고유 ID
    gameType: "solo",             // 게임 타입 (solo, dual, multi)
    data: {
        orientation: {            // 기기 방향 (DeviceOrientationEvent)
            alpha: 45.0,         // Z축 기준 회전 (0-360°)
            beta: 15.0,          // X축 기준 앞뒤 기울기 (-180~180°)
            gamma: -30.0         // Y축 기준 좌우 기울기 (-90~90°)
        },
        acceleration: {           // 가속도 (DeviceMotionEvent.acceleration)
            x: 0.1,              // X축 가속도
            y: -9.8,             // Y축 가속도 (중력 포함)
            z: 0.2               // Z축 가속도
        },
        rotationRate: {           // 회전 속도 (DeviceMotionEvent.rotationRate)
            alpha: 0.0,          // Z축 회전 속도
            beta: 0.5,           // X축 회전 속도
            gamma: -0.3          // Y축 회전 속도
        }
    },
    timestamp: 1641234567890      // 데이터 전송 타임스탬프
}
```

### 5.2. 센서 데이터 활용 예제

```javascript
function processSensorData(sensorData) {
    const { orientation, acceleration, rotationRate } = sensorData.data;

    // 🎮 기울기 조작 예제 (orientation.gamma, orientation.beta 활용)
    if (orientation) {
        const moveX = orientation.gamma * 0.1;  // 좌우 기울기 (Y축 회전)
        const moveY = orientation.beta * 0.1;   // 앞뒤 기울기 (X축 회전)

        // 게임 오브젝트의 위치나 방향을 업데이트
        player.position.x += moveX;
        player.position.y += moveY;
    }

    // 🕹️ 흔들기 감지 예제 (acceleration 활용)
    if (acceleration) {
        // 총 가속도 계산 (흔들림 강도)
        const totalAccel = Math.sqrt(
            acceleration.x ** 2 +
            acceleration.y ** 2 +
            acceleration.z ** 2
        );

        // 특정 임계값 이상일 때 흔들기 액션 트리거
        if (totalAccel > 15) { // 임계값은 게임에 따라 조절
            triggerShakeAction(); // 흔들기 액션 함수 호출
        }
    }

    // 🔄 회전 속도 활용 예제 (rotationRate 활용)
    if (rotationRate) {
        // Z축 회전 속도를 사용하여 캐릭터 회전
        const rotateZ = rotationRate.alpha * 0.01; // 회전 속도에 비례하여 회전
        player.rotation.z += rotateZ;
    }
}
```

### 5.3. 센서 데이터 수집 유틸리티 (`SensorCollector`)

`SessionSDK.js` 내부에 포함된 `SensorCollector` 클래스는 모바일 기기에서 센서 데이터를 수집하는 역할을 합니다.

*   **초기화**:
    ```javascript
    const sensorCollector = new SensorCollector({
        throttle: 50, // 데이터 전송 간격 (ms), 기본값 50ms
        sensitivity: 1 // 센서 민감도 조절
    });
    ```
*   **시작**: `sensorCollector.start()`
    *   iOS 13+에서는 `DeviceMotionEvent.requestPermission()` 및 `DeviceOrientationEvent.requestPermission()`을 통해 사용자 권한을 요청합니다.
*   **중지**: `sensorCollector.stop()`
*   **데이터 수신**: `sensorCollector.onData(handler)`를 사용하여 실시간 센서 데이터를 받습니다.
    ```javascript
    sensorCollector.onData((data) => {
        // 수집된 센서 데이터 (acceleration, rotationRate, orientation)
        console.log(data);
        // 이 데이터를 SessionSDK.sendSensorData()로 전송
    });
    ```
*   **현재 데이터 가져오기**: `sensorCollector.getCurrentData()`

---

## 6. API 엔드포인트

서버는 게임 관리 및 세션 관리를 위한 RESTful API와 Socket.IO 이벤트를 제공합니다.

### 6.1. HTTP API

*   `GET /api/games`: 현재 허브에 등록된 모든 게임 목록을 반환합니다.
    ```json
    // 응답 예시
    {
      "success": true,
      "data": [
        {
          "id": "solo",
          "title": "Solo Game",
          "description": "1개 센서로 플레이하는 공 조작 게임",
          "category": "solo",
          "icon": "🎯",
          "path": "/games/solo",
          "version": "1.0.0",
          "author": "Sensor Game Hub Team",
          "sensors": ["orientation"],
          "maxPlayers": 1,
          "difficulty": "medium",
          "status": "active",
          "featured": false,
          "tags": ["ball", "physics", "single-player"],
          "instructions": [],
          "controls": {}
        }
      ],
      "stats": {
        "total": 1,
        "categories": { "solo": 1 },
        "featured": 0,
        "experimental": 0
      }
    }
    ```
*   `GET /api/games/:gameId`: 특정 `gameId`에 해당하는 게임의 상세 정보를 반환합니다.
*   `POST /api/admin/rescan`: 서버에 등록된 게임 목록을 강제로 재스캔합니다. 개발 중 새 게임을 추가했을 때 유용합니다.
    ```json
    // 응답 예시
    {
      "success": true,
      "message": "게임 재스캔 완료",
      "stats": { "total": 1, "categories": { "solo": 1 } }
    }
    ```
*   `GET /api/stats`: 현재 서버의 세션 통계 정보를 반환합니다.
*   `GET /api/session/:code`: 특정 세션 코드에 대한 상세 정보를 반환합니다.

### 6.2. WebSocket Events (SessionSDK를 통해 사용)

*   `create-session`: 게임 클라이언트가 서버에 새 세션 생성을 요청합니다.
*   `connect-sensor`: 모바일 센서 클라이언트가 특정 세션에 연결을 요청합니다.
*   `sensor-data`: 모바일 센서 클라이언트가 센서 데이터를 서버로 전송합니다.
*   `start-game`: 게임 클라이언트가 게임 시작을 서버에 알립니다.

---

## 7. UI/UX 가이드라인

게임의 일관된 디자인과 사용자 경험을 위해 다음 가이드라인을 따르는 것이 좋습니다.

### 7.1. 게임 화면 구성

`GAME_TEMPLATE.html`을 참조하여 다음과 같은 기본 레이아웃을 구성할 수 있습니다.

```html
<div class="game-container">
    <!-- 게임 캔버스: 실제 게임 플레이 영역 -->
    <canvas id="gameCanvas"></canvas>

    <!-- UI 오버레이: 게임 정보, 세션 정보, 컨트롤 버튼 등 -->
    <div class="game-ui">
        <!-- 세션 정보 패널: 세션 코드, QR 코드 표시 -->
        <div class="session-panel">
            <div class="session-code">1234</div>
            <div class="qr-container"></div>
        </div>

        <!-- 게임 정보: 점수, 타이머, 플레이어 수 등 -->
        <div class="game-info">
            <div class="score">점수: 0</div>
            <div class="timer">시간: 60s</div>
        </div>

        <!-- 컨트롤 패널: 재시작, 일시정지, 허브로 돌아가기 버튼 -->
        <div class="control-panel">
            <button onclick="resetGame()">🔄 재시작</button>
            <button onclick="togglePause()">⏸️ 일시정지</button>
            <a href="/">🏠 허브로</a>
        </div>
    </div>
</div>
```

### 7.2. CSS 테마 변수

프로젝트는 일관된 스타일링을 위해 CSS 변수를 제공합니다.

```css
:root {
    --primary: #3b82f6;       /* 주 색상 (파랑) */
    --secondary: #8b5cf6;     /* 보조 색상 (보라) */
    --success: #10b981;       /* 성공 (초록) */
    --warning: #f59e0b;       /* 경고 (주황) */
    --error: #ef4444;         /* 오류 (빨강) */
    --background: #0f172a;    /* 배경 색상 (짙은 남색) */
    --surface: #1e293b;       /* 표면 색상 (어두운 회색) */
    --text-primary: #f8fafc;  /* 기본 텍스트 색상 (밝은 회색) */
    --text-secondary: #cbd5e1;/* 보조 텍스트 색상 (회색) */
    --border: #475569;        /* 테두리 색상 */
}
```

### 7.3. QR 코드 생성

`SessionSDK`는 `QRCodeGenerator` 유틸리티를 포함하고 있습니다. `GAME_TEMPLATE.html`에 구현된 안전한 QR 코드 생성 로직을 따르는 것이 중요합니다.

```javascript
// ✅ QR 코드 안전한 생성 (라이브러리 로드 실패 시 폴백 처리)
displaySessionInfo(session) {
    document.getElementById('sessionCode').textContent = session.sessionCode;

    const qrUrl = `${window.location.origin}/sensor.html?session=${session.sessionCode}`;

    if (typeof QRCode !== 'undefined') {
        // QRCode 라이브러리가 로드된 경우 사용
        QRCode.toCanvas(document.createElement('canvas'), qrUrl, (error, canvas) => {
            if (!error) {
                canvas.style.width = '200px';
                canvas.style.height = '200px';
                document.getElementById('qrContainer').innerHTML = '';
                document.getElementById('qrContainer').appendChild(canvas);
            } else {
                console.error('QR 코드 생성 실패:', error);
                this.showQRCodeFallback(qrUrl);
            }
        });
    } else {
        // QRCode 라이브러리가 로드되지 않은 경우 폴백 사용
        console.warn('QRCode 라이브러리가 로드되지 않았습니다. 폴백 사용.');
        this.showQRCodeFallback(qrUrl);
    }
}

showQRCodeFallback(qrUrl) {
    // 외부 QR 코드 서비스 API 사용 (예: qrserver.com)
    const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrUrl)}`;
    const img = document.createElement('img');
    img.src = qrApiUrl;
    img.style.width = '200px';
    img.style.height = '200px';
    img.alt = 'QR Code';

    document.getElementById('qrContainer').innerHTML = '';
    document.getElementById('qrContainer').appendChild(img);
}
```

---

## 8. 배포 가이드

### 8.1. Render.com 자동 배포

프로젝트는 Render.com을 통한 자동 배포를 지원합니다.
1.  GitHub 저장소에 코드를 푸시합니다.
2.  Render.com에서 해당 저장소를 연결하고 자동 배포를 설정합니다.
3.  새로운 커밋이 푸시될 때마다 자동으로 빌드 및 배포가 진행됩니다.
4.  새로 추가된 게임은 서버 재시작 시 자동으로 감지되어 허브에 등록됩니다.

### 8.2. 로컬 배포

```bash
# 프로젝트 루트에서
npm start
# 또는
node server/index.js
```

### 8.3. 환경 변수

*   `PORT`: 서버가 실행될 포트 (기본값: `3000`)
*   `NODE_ENV`: Node.js 환경 (`production`, `development` 등)

---

## 9. 디버깅 및 문제 해결

게임 개발 중 발생할 수 있는 일반적인 문제와 해결 방법을 안내합니다.

### 9.1. 필수 구현 패턴 준수

다음 패턴을 지키지 않으면 예상치 못한 오류가 발생할 수 있습니다.

#### 9.1.1. 서버 연결 순서

**문제**: "서버에 연결되지 않았습니다" 오류 발생.
**원인**: `SessionSDK`가 서버에 연결되기 전에 `createSession()`을 호출하는 경우.
**해결**: `sdk.on('connected', ...)` 이벤트를 기다린 후 세션 생성 로직을 실행합니다.

```javascript
// ❌ 잘못된 방법: 즉시 세션 생성
class MyGame {
    constructor() {
        this.sdk = new SessionSDK({...});
        this.sdk.createSession(); // 🚫 연결 전 생성 시도 -> 실패!
    }
}

// ✅ 올바른 방법: 연결 완료 후 세션 생성
class MyGame {
    constructor() {
        this.sdk = new SessionSDK({...});
        this.setupEvents(); // 이벤트 리스너 설정 함수 호출
    }

    setupEvents() {
        this.sdk.on('connected', () => {
            this.createSession(); // ✅ 'connected' 이벤트 발생 후 세션 생성
        });
    }

    async createSession() {
        try {
            await this.sdk.createSession();
            // 세션 생성 성공 후 로직
        } catch (error) {
            console.error('세션 생성 실패:', error);
        }
    }
}
```

#### 9.1.2. CustomEvent 처리

**문제**: `session.sessionCode`가 `undefined`로 표시되거나, 센서 데이터가 올바르게 처리되지 않음.
**원인**: `SessionSDK`의 이벤트 핸들러에서 `CustomEvent` 객체에서 `detail` 속성을 추출하지 않고 직접 데이터를 사용하려 할 때.
**해결**: 모든 `SessionSDK` 이벤트 핸들러에서 `event.detail || event` 패턴을 사용하여 실제 데이터를 추출합니다.

```javascript
// ❌ 잘못된 방법: 직접 매개변수 사용
sdk.on('session-created', (session) => {
    console.log(session.sessionCode); // 🚫 undefined 오류!
});

// ✅ 올바른 방법: event.detail 패턴 사용
sdk.on('session-created', (event) => {
    const session = event.detail || event; // ✅ 항상 이 패턴 사용!
    console.log(session.sessionCode); // 정상 작동
});

// 센서 데이터 처리 시에도 동일하게 적용
sdk.on('sensor-data', (event) => {
    const data = event.detail || event; // 필수!
    processSensorData(data);
});
```

### 9.2. 일반적인 문제 및 해결법

*   **"QRCode is not defined" 오류**:
    *   **원인**: `qrcode.min.js` 라이브러리 로드 실패 또는 스크립트 로드 순서 문제.
    *   **해결**: `GAME_TEMPLATE.html`에 구현된 안전한 QR 코드 생성 로직(폴백 처리)을 따릅니다.
*   **게임이 허브에 등록되지 않음**:
    *   **원인**: `game.json` 파일의 문법 오류, 파일 경로 문제, 서버 재스캔 누락.
    *   **해결**:
        1.  `game.json` 파일의 JSON 문법을 검사합니다 (온라인 JSON validator 사용).
        2.  게임 폴더와 `game.json`의 `id` 필드가 일치하는지 확인합니다.
        3.  서버를 재시작하거나 `/api/admin/rescan` API를 호출하여 게임 목록을 강제로 업데이트합니다.
        4.  브라우저 캐시를 새로고침합니다.
*   **성능 문제 (게임 끊김, 지연)**:
    *   **원인**: 과도한 센서 데이터 처리, 비효율적인 렌더링, 메모리 누수.
    *   **해결**:
        *   **센서 데이터 스로틀링**: `SensorCollector`의 `throttle` 옵션을 사용하거나, `sdk.on('sensor-data')` 핸들러 내에서 직접 데이터 처리 빈도를 조절합니다 (예: 33ms 간격으로 30FPS).
            ```javascript
            let lastSensorUpdate = 0;
            const SENSOR_THROTTLE = 33; // 30fps

            sdk.on('sensor-data', (event) => {
                const now = Date.now();
                if (now - lastSensorUpdate < SENSOR_THROTTLE) return;

                lastSensorUpdate = now;
                processSensorData(event.detail || event);
            });
            ```
        *   **렌더링 최적화**: `requestAnimationFrame`을 사용하여 브라우저의 렌더링 주기에 맞춰 화면을 그립니다.
            ```javascript
            let lastRenderTime = 0;
            const TARGET_FPS = 60;
            const FRAME_TIME = 1000 / TARGET_FPS;

            function gameLoop(currentTime) {
                if (currentTime - lastRenderTime >= FRAME_TIME) {
                    update(); // 게임 로직 업데이트
                    render(); // 화면 그리기
                    lastRenderTime = currentTime;
                }
                requestAnimationFrame(gameLoop);
            }
            ```
        *   **메모리 관리**: 불필요한 객체 생성 최소화, 이벤트 리스너 및 타이머 정리.
            ```javascript
            function cleanup() {
                sdk.off('sensor-data', sensorHandler); // 이벤트 리스너 제거
                cancelAnimationFrame(animationId); // requestAnimationFrame 중지
                // 캔버스 및 기타 리소스 정리
            }
            ```
*   **모바일에서 센서 권한 문제**:
    *   **원인**: iOS 13+ 등 일부 환경에서 센서 접근을 위한 명시적 사용자 권한이 필요.
    *   **해결**: `SensorCollector.start()` 메서드 내에서 자동으로 권한 요청 로직이 포함되어 있습니다. 사용자가 권한을 거부하면 센서 데이터 수집이 불가능합니다.

### 9.3. 디버깅 도구

*   **SessionSDK 디버그 모드**: `new SessionSDK({ debug: true })`로 초기화하면 콘솔에 상세 로그가 출력됩니다.
*   **브라우저 개발자 도구**: 콘솔, 네트워크 탭, 성능 탭을 활용하여 문제의 원인을 분석합니다.
*   **센서 데이터 로깅**: `sdk.on('sensor-data', ...)` 핸들러 내에서 `console.table(data.data.orientation)` 등을 사용하여 센서 데이터의 변화를 실시간으로 확인합니다.

---

## 10. AI 코딩 어시스턴트용 프롬프트 예시

이 섹션은 AI 챗봇이 개발자와 상호작용할 때 참고할 수 있는 프롬프트 예시를 제공합니다.

### 10.1. 프로젝트 초기화 프롬프트

개발자가 새 게임 개발을 시작할 때 AI에게 제공할 수 있는 정보입니다.

```
# Sensor Game Hub v6.0에서 새 게임 개발

나는 Sensor Game Hub v6.0 플랫폼에서 새로운 센서 게임을 개발하고 싶습니다.

## 프로젝트 정보
- **프로젝트 경로**: `/Users/minhyuk/Desktop/sensor-game-hub-v5/sensor-game-hub-v6/`
- **플랫폼**: Sensor Game Hub v6.0 (모바일 센서 기반 게임 플랫폼)
- **기술 스택**: HTML5, CSS3, JavaScript, Canvas API, SessionSDK
- **센서**: DeviceOrientationEvent, DeviceMotionEvent (iOS/Android)

## 개발 환경
- 서버: Node.js + Express + Socket.IO
- 클라이언트: HTML5 + Canvas + SessionSDK
- 센서 클라이언트: 모바일 웹 (iOS/Android 센서 지원)

## 자동 게임 등록 시스템
- 새 게임을 `public/games/[게임명]/` 폴더에 추가
- `index.html` (필수)와 `game.json` (선택) 파일 생성
- 서버 재시작 시 자동으로 메인 허브에 등록됨

## 사용 가능한 SDK
**SessionSDK** (`/js/SessionSDK.js`):
- 세션 생성: `sdk.createSession()`
- 센서 연결 감지: `sdk.on('sensor-connected', callback)`
- 센서 데이터 수신: `sdk.on('sensor-data', callback)`
- 게임 시작: `sdk.startGame()`

**센서 데이터 구조**:
```javascript
{
    sensorId: "sensor",
    gameType: "solo",
    data: {
        orientation: { alpha, beta, gamma },    // 기기 방향
        acceleration: { x, y, z },              // 가속도
        rotationRate: { alpha, beta, gamma }    // 회전 속도
    }
}
```

## 기존 예제 게임들
1. **Solo Game** (`/games/solo/`): 1인용 공 조작 게임
2. **Dual Game** (`/games/dual/`): 2인 협력 게임
3. **Multi Game** (`/games/multi/`): 8인 멀티플레이어 경쟁 게임

## 개발 규칙 (필수!)
- **SessionSDK 이벤트는 `event.detail || event` 패턴으로 처리** (매우 중요!)
- **서버 연결 완료 후 세션 생성**: `connected` 이벤트 기다리기
- **QR 코드 생성 시 폴백 처리** 추가 (라이브러리 로드 실패 대응)
- 허브로 돌아가는 링크는 `href="/"`로 설정
- 모든 파일 경로는 절대 경로 사용
- 게임 내 UI는 기존 테마 CSS 변수 사용

다음에 어떤 게임을 개발하고 싶은지 알려주시면, 구체적인 개발 계획과 코드를 제공하겠습니다.
```

### 10.2. 새 게임 개발 프롬프트

개발자가 특정 게임을 개발해달라고 요청할 때 AI에게 제공할 수 있는 정보입니다.

```
# [게임명] 개발 요청

다음 센서 게임을 Sensor Game Hub v6.0에서 개발해주세요:

## 게임 사양
- **게임명**: [게임명]
- **게임 타입**: [solo/dual/multi] (플레이어 수에 따라)
- **게임 장르**: [arcade/puzzle/racing/adventure 등]
- **주요 메커니즘**: [기울기 조작/흔들기/회전 등]
- **목표**: [점수 달성/목적지 도달/생존 등]

## 요구사항
1.  **파일 구조**:
    *   `public/games/[게임폴더명]/index.html`
    *   `public/games/[게임폴더명]/game.json`
2.  **필수 구현 요소**:
    *   SessionSDK 통합 (`connected` 이벤트 후 세션 생성!)
    *   센서 데이터 처리 (`event.detail || event` 패턴 필수!)
    *   게임 UI (세션 코드, QR 코드, 점수 등)
    *   QR 코드 폴백 처리 (라이브러리 로드 실패 대응)
    *   허브로 돌아가기 버튼
3.  **센서 활용**:
    *   기기 기울기 (orientation.beta, gamma)
    *   기기 회전 (orientation.alpha)
    *   흔들기 감지 (acceleration)
    *   회전 속도 (rotationRate)
4.  **UI 요소**:
    *   게임 캔버스
    *   세션 정보 패널 (코드, QR)
    *   점수/타이머 표시
    *   컨트롤 패널 (재시작, 일시정지, 허브로)
5.  **스타일링**:
    *   기존 CSS 테마 변수 사용
    *   반응형 디자인
    *   모바일 친화적 UI

## 개발 단계
1.  게임 폴더 및 기본 파일 생성
2.  HTML 구조 및 CSS 스타일링
3.  SessionSDK 통합 및 센서 이벤트 처리
4.  게임 로직 구현
5.  UI 업데이트 및 상태 관리
6.  테스트 및 최적화

기존 예제 게임들(`/games/solo/`, `/games/dual/`, `/games/multi/`)을 참조하여 일관된 구조로 개발해주세요.
```

### 10.3. 디버깅 및 최적화 프롬프트

개발자가 문제 해결이나 성능 개선을 요청할 때 AI에게 제공할 수 있는 정보입니다.

```
# Sensor Game Hub 게임 디버깅

다음 문제를 해결해주세요:

## 실제 발생하는 문제들과 해결법

### 1. "서버에 연결되지 않았습니다" 오류
**문제**: 게임 시작 시 세션 생성 실패
**원인**: 서버 연결 완료 전 세션 생성 시도
**해결**: `connected` 이벤트 기다리기

### 2. 세션 코드가 undefined인 경우
**문제**: QR 코드에 "undefined" 표시, 콘솔에 CustomEvent 객체
**원인**: CustomEvent 객체를 직접 사용
**해결**: `event.detail || event` 패턴 사용

### 3. "QRCode is not defined" 오류
**문제**: QR 코드 생성 시 라이브러리 오류
**원인**: CDN에서 QRCode 라이브러리 로드 실패
**해결**: 폴백 API 사용

### 4. 센서 데이터가 오지 않는 경우
**문제**: `processSensorData` 함수에서 undefined 오류
**해결**: 모든 SDK 이벤트에서 `event.detail || event` 패턴 사용

### 5. 게임이 허브에 등록되지 않는 경우
**문제**: 새 게임이 메인 페이지에 표시되지 않음
**해결 순서**:
1.  `game.json` 문법 확인
2.  `/api/admin/rescan` POST 요청
3.  서버 재시작
4.  `/api/games` API로 확인

### 6. 성능 문제
**문제**: 게임이 끊기거나 느림
**해결**:
-   센서 데이터 throttling (33ms)
-   requestAnimationFrame 사용
-   렌더링 최적화
-   메모리 누수 방지

## 디버깅 도구
-   SDK 디버그 모드 활성화: `new SessionSDK({ debug: true })`
-   센서 데이터 로깅: `sdk.on('sensor-data', (event) => { const data = event.detail || event; console.table(data.data.orientation); });`
-   브라우저 개발자 도구 활용

현재 어떤 문제가 발생하고 있는지 구체적으로 알려주시면 해결 방법을 제시하겠습니다.
```

---

## 11. 서버 사이드 컴포넌트 상세

### 11.1. `server/SessionManager.js`

`SessionManager`는 게임 세션의 생성, 관리, 센서 연결 및 데이터 업데이트를 담당하는 핵심 서버 모듈입니다.

*   **주요 기능**:
    *   **세션 생성 (`createSession`)**:
        *   고유한 4자리 세션 코드를 생성하고, `gameId`, `gameType`, 호스트 소켓 ID 및 IP를 기반으로 새 세션을 초기화합니다.
        *   세션 ID는 `gameId_sessionCode_timestamp` 형식으로 생성됩니다.
        *   세션에는 호스트 정보, 연결된 센서 목록 (`Map`), 현재 상태 (`waiting`, `ready`, `playing`, `finished`), 생성 시간, 마지막 활동 시간, 최대 센서 수 등이 포함됩니다.
    *   **센서 연결 (`connectSensor`)**:
        *   제공된 세션 코드를 사용하여 기존 세션을 찾습니다.
        *   세션의 `maxSensors`를 초과하는 센서 연결을 방지합니다.
        *   게임 타입에 따라 `sensor`, `sensor1/sensor2`, `player1/player2/...`와 같은 고유한 `sensorId`를 생성합니다.
        *   연결된 센서의 소켓 ID, IP, 디바이스 정보 등을 저장하고 세션의 `lastActivity`를 업데이트합니다.
        *   모든 필수 센서가 연결되면 세션 상태를 `ready`로 변경합니다.
    *   **센서 데이터 업데이트 (`updateSensorData`)**:
        *   모바일 센서 클라이언트로부터 수신된 센서 데이터를 해당 세션 및 센서에 연결합니다.
        *   센서의 `lastDataReceived` 및 세션의 `lastActivity`를 업데이트합니다.
        *   처리된 센서 데이터를 게임 호스트에게 전달할 수 있도록 반환합니다.
    *   **세션 상태 업데이트 (`updateSessionState`)**:
        *   연결된 센서 수에 따라 세션의 상태를 `waiting` 또는 `ready`로 전환합니다.
    *   **게임 시작 (`startGame`)**:
        *   세션 상태가 `ready`일 때만 게임 시작을 허용하고, 상태를 `playing`으로 변경합니다.
    *   **연결 해제 (`disconnect`)**:
        *   호스트 또는 센서 클라이언트의 연결이 끊어졌을 때 해당 세션 또는 센서를 정리합니다.
        *   호스트 연결 해제 시 해당 세션과 연결된 모든 센서가 영향을 받습니다.
        *   센서 연결 해제 시 세션의 `remainingSensors`를 업데이트하고, 필요한 경우 세션 상태를 `waiting`으로 되돌립니다.
    *   **세션 정리 (`cleanupExpiredSessions`)**:
        *   `sessionTimeout` (기본 30분) 동안 활동이 없는 세션을 주기적으로 (`cleanupInterval`, 기본 5분) 찾아 제거합니다.
*   **세션 코드 및 센서 ID 생성 로직**:
    *   `generateSessionCode()`: 4자리 숫자로 된 고유 세션 코드를 재귀적으로 생성하여 중복을 방지합니다.
    *   `generateSensorId(session, sensorIndex)`: 게임 타입 (`solo`, `dual`, `multi`)에 따라 센서 ID를 다르게 부여합니다.
*   **설정**:
    *   `sessionTimeout`: 세션 만료 시간 (기본 30분)
    *   `cleanupInterval`: 만료된 세션 정리 주기 (기본 5분)
    *   `maxSessionsPerIP`: 단일 IP당 최대 세션 수 (현재 코드에서는 사용되지 않음)
    *   `sessionCodeLength`: 세션 코드 길이 (기본 4자리)

### 11.2. `server/GameScanner.js`

`GameScanner`는 `public/games` 디렉토리를 스캔하여 게임 메타데이터를 자동으로 감지하고 관리하는 서버 모듈입니다.

*   **주요 기능**:
    *   **게임 스캔 (`scanGames`)**:
        *   `public/games` 디렉토리 내의 모든 하위 디렉토리를 탐색합니다.
        *   각 게임 폴더에서 `index.html` 파일의 존재 여부를 확인합니다.
        *   `game.json` 파일이 존재하면 해당 메타데이터를 파싱하고, 없으면 기본 메타데이터를 생성합니다.
        *   스캔된 게임 정보를 `Map` 형태로 저장하여 빠르게 조회할 수 있도록 합니다.
    *   **메타데이터 처리**:
        *   `generateDefaultMetadata(gameFolderName)`: `game.json`이 없을 경우, 폴더명을 기반으로 기본 `id`, `title`, `description`, `category`, `icon`, `sensors` 등을 추론하여 생성합니다.
        *   `validateAndEnhanceMetadata(gameFolderName, metadata)`: 파싱된 메타데이터를 검증하고, 누락된 필드를 기본값으로 채우거나 추가 정보를 보완합니다 (예: `path`, `folder`, `created`, `updated`).
    *   **게임 정보 조회**:
        *   `getGames()`: 등록된 모든 게임 목록을 반환합니다.
        *   `getGame(gameId)`: 특정 `gameId`에 해당하는 게임 정보를 반환합니다.
        *   `getActiveGames()`, `getFeaturedGames()`, `getGamesByCategory(category)`: 다양한 필터링 옵션을 제공합니다.
        *   `searchGames(query)`: 제목, 설명, 태그를 기반으로 게임을 검색합니다.
    *   **게임 통계 (`getStats`)**:
        *   등록된 게임의 총 개수, 카테고리별 개수, 상태별 개수, 추천/실험적 게임 개수 등의 통계를 제공합니다.
*   **추론 로직**:
    *   `inferCategory(folderName)`: 폴더명에 `multi`, `dual`, `solo`, `experimental` 등의 키워드가 포함되어 있는지 확인하여 게임 카테고리를 추론합니다.
    *   `inferIcon(folderName)`: 폴더명에 따라 게임 아이콘(이모지)을 추론합니다 (예: `racing` -> 🏎️, `puzzle` -> 🧩).
    *   `inferSensorType(folderName)`: 추론된 카테고리에 따라 기본 센서 타입 (`orientation`, `motion`)을 설정합니다.
    *   `getMaxPlayersByCategory(category)`: 카테고리에 따라 최대 플레이어 수를 반환합니다.

---

## 12. 모바일 센서 클라이언트 (`public/sensor.html`) 상세

`public/sensor.html`은 사용자의 모바일 기기를 게임 컨트롤러로 활용하기 위한 웹 페이지입니다. 이 페이지는 `SessionSDK`와 `SensorCollector`를 사용하여 서버와 통신하고 센서 데이터를 수집합니다.

*   **주요 기능**:
    *   **세션 연결**:
        *   사용자는 4자리 세션 코드를 직접 입력하거나 QR 코드 스캐너를 통해 세션 코드를 얻을 수 있습니다.
        *   URL 파라미터 (`?session=XXXX`)를 통해 세션 코드를 자동으로 가져올 수도 있습니다.
        *   `SessionSDK.connectSensor()`를 호출하여 게임 세션에 연결을 시도합니다.
    *   **센서 데이터 수집 및 전송**:
        *   `SensorCollector`를 사용하여 `devicemotion` 및 `deviceorientation` 이벤트를 통해 가속도, 회전 속도, 기기 방향 데이터를 수집합니다.
        *   수집된 센서 데이터는 `throttle` 옵션(기본 33ms)에 따라 최적화된 빈도로 `SessionSDK.sendSensorData()`를 통해 서버로 전송됩니다.
        *   iOS 13+ 환경에서는 센서 접근을 위한 사용자 권한 요청 로직이 포함되어 있습니다.
    *   **UI 및 상태 표시**:
        *   **연결 상태**: 서버 및 게임 세션 연결 상태를 시각적으로 표시합니다.
        *   **게임 정보**: 연결된 게임의 타입, 연결된 플레이어 수, 게임 상태 등을 보여줍니다.
        *   **플레이어 정보**: 현재 센서 클라이언트가 게임 내에서 어떤 플레이어(예: Player 1, Player 2)로 연결되었는지 표시하고, 해당 플레이어 번호에 따라 아바타 색상을 변경합니다.
        *   **실시간 센서 데이터**: 가속도(X, Y, Z), 기울기(X, Y), 회전(Z) 값을 실시간으로 업데이트하여 보여줍니다.
        *   **활동 표시기**: 센서 데이터가 전송될 때마다 시각적인 피드백을 제공하여 센서가 정상 작동 중임을 나타냅니다.
        *   **메시지 시스템**: 사용자에게 연결 상태, 오류, 성공 메시지 등을 알립니다.
    *   **QR 코드 스캐너**:
        *   `html5-qrcode` 라이브러리를 사용하여 모바일 카메라로 QR 코드를 스캔하고 세션 코드를 자동으로 추출합니다.
    *   **연결 관리**:
        *   서버 연결 끊김, 호스트 연결 해제 등의 이벤트에 대응하여 UI를 업데이트하고 연결을 재설정할 수 있도록 합니다.
*   **기술적 고려사항**:
    *   `user-scalable=no`, `touch-action: manipulation`, `-webkit-text-size-adjust: 100%` 등을 사용하여 모바일 웹 환경에서 최적의 사용자 경험을 제공합니다.
    *   CSS 변수를 활용하여 일관된 디자인 테마를 적용합니다.
    *   센서 데이터 전송 시 `throttle`을 적용하여 네트워크 부하를 줄이고 성능을 최적화합니다.

---

**Sensor Game Hub v6.0** - 모바일 센서로 새로운 게임 경험을 만나보세요! 🎮✨