/**
 * üöÄ Sensor Game Hub v6.0 Server
 * 
 * ÏôÑÎ≤ΩÌïú Í≤åÏûÑÎ≥Ñ ÎèÖÎ¶Ω ÏÑ∏ÏÖò ÏãúÏä§ÌÖú
 * - Express + Socket.IO Í∏∞Î∞ò
 * - Ïã§ÏãúÍ∞Ñ ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
 * - ÏûêÎèô ÏÑ∏ÏÖò Í¥ÄÎ¶¨ Î∞è Ï†ïÎ¶¨
 */

const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');

const SessionManager = require('./SessionManager');
const GameScanner = require('./GameScanner');
const AIAssistant = require('./AIAssistant');
const DocumentEmbedder = require('./DocumentEmbedder');
const AIGameGenerator = require('./AIGameGenerator');
const InteractiveGameGenerator = require('./InteractiveGameGenerator');

class GameServer {
    constructor() {
        this.app = express();
        this.server = http.createServer(this.app);
        this.io = socketIo(this.server, {
            cors: {
                origin: "*",
                methods: ["GET", "POST"]
            },
            transports: ['websocket', 'polling']
        });
        
        this.sessionManager = new SessionManager();
        this.gameScanner = new GameScanner();
        this.aiAssistant = null; // ÏßÄÏó∞ Ï¥àÍ∏∞Ìôî
        this.documentEmbedder = null; // ÏßÄÏó∞ Ï¥àÍ∏∞Ìôî
        this.aiGameGenerator = null; // ÏßÄÏó∞ Ï¥àÍ∏∞Ìôî
        this.interactiveGameGenerator = null; // ÏßÄÏó∞ Ï¥àÍ∏∞Ìôî
        this.port = process.env.PORT || 3000;
        
        this.setupMiddleware();
        this.setupRoutes();
        this.setupSocketHandlers();
        
        // Í≤åÏûÑ Ïä§Ï∫î Ï¥àÍ∏∞Ìôî
        this.initializeGames();
        
        // AI Assistant Ï¥àÍ∏∞Ìôî (ÎπÑÎèôÍ∏∞)
        this.initializeAI();
        
        console.log('üöÄ GameServer v6.0 Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }
    
    /**
     * ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
     */
    setupMiddleware() {
        // Î≥¥Ïïà Î∞è ÏÑ±Îä• ÎØ∏Îì§Ïõ®Ïñ¥
        this.app.use(helmet({
            contentSecurityPolicy: false, // Í∞úÎ∞ú Ìé∏ÏùòÏÉÅ ÎπÑÌôúÏÑ±Ìôî
            crossOriginEmbedderPolicy: false
        }));
        this.app.use(compression());
        this.app.use(cors());
        this.app.use(express.json());
        
        // Ï†ïÏ†Å ÌååÏùº ÏÑúÎπô
        this.app.use(express.static(path.join(__dirname, '../public')));
        
        // ÏöîÏ≤≠ Î°úÍπÖ
        this.app.use((req, res, next) => {
            console.log(`üìù ${req.method} ${req.path} - ${req.ip}`);
            next();
        });
    }
    
    /**
     * HTTP ÎùºÏö∞Ìä∏ ÏÑ§Ï†ï
     */
    setupRoutes() {
        // Í∏∞Î≥∏ Î£®Ìä∏ - ÎèôÏ†Å Í≤åÏûÑ ÌóàÎ∏å ÌéòÏù¥ÏßÄ
        this.app.get('/', (req, res) => {
            const games = this.gameScanner.getActiveGames();
            res.send(this.generateHomePage(games));
        });
        
        // AI Assistant ÌéòÏù¥ÏßÄ
        this.app.get('/ai-assistant', (req, res) => {
            res.send(this.generateAIAssistantPage());
        });
        
        // AI Í≤åÏûÑ ÏÉùÏÑ±Í∏∞ ÌéòÏù¥ÏßÄ (Í∏∞Ï°¥)
        this.app.get('/ai-game-generator', (req, res) => {
            res.sendFile(path.join(__dirname, '../public/ai-game-generator.html'));
        });
        
        // ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞ ÌéòÏù¥ÏßÄ (ÏÉàÎ°úÏö¥ Í∏∞Î≥∏)
        this.app.get('/interactive-game-generator', (req, res) => {
            res.sendFile(path.join(__dirname, '../public/interactive-game-generator.html'));
        });
        
        // Í∞úÎ∞úÏûê Í∞ÄÏù¥Îìú ÌéòÏù¥ÏßÄ
        this.app.get('/developer-guide', (req, res) => {
            res.send(this.generateDeveloperGuidePage());
        });
        
        // Í≤åÏûÑ Î™©Î°ù API
        this.app.get('/api/games', (req, res) => {
            const games = this.gameScanner.getActiveGames();
            res.json({
                success: true,
                data: games,
                stats: this.gameScanner.getStats()
            });
        });
        
        // ÌäπÏ†ï Í≤åÏûÑ Ï†ïÎ≥¥ API  
        this.app.get('/api/games/:gameId', (req, res) => {
            const game = this.gameScanner.getGame(req.params.gameId);
            if (!game) {
                return res.status(404).json({
                    success: false,
                    error: 'Í≤åÏûÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                });
            }
            res.json({
                success: true,
                data: game
            });
        });
        
        // Í≤åÏûÑ Ïû¨Ïä§Ï∫î API (Í∞úÎ∞úÏö©)
        this.app.post('/api/admin/rescan', async (req, res) => {
            try {
                await this.gameScanner.scanGames();
                res.json({
                    success: true,
                    message: 'Í≤åÏûÑ Ïû¨Ïä§Ï∫î ÏôÑÎ£å',
                    stats: this.gameScanner.getStats()
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });
        
        // Í∏∞Ï°¥ Ï†ïÏ†Å ÌôàÌéòÏù¥ÏßÄ (Î∞±ÏóÖÏö©)
        this.app.get('/static', (req, res) => {
            res.send(`
                <!DOCTYPE html>
                <html lang="ko">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>üöÄ Sensor Game Hub v6.0</title>
                    <style>
                        body {
                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                            background: linear-gradient(135deg, #0f172a, #1e293b);
                            color: #f8fafc;
                            margin: 0;
                            padding: 2rem;
                            min-height: 100vh;
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            justify-content: center;
                        }
                        .container {
                            max-width: 800px;
                            text-align: center;
                        }
                        h1 {
                            font-size: 3rem;
                            margin-bottom: 1rem;
                            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
                            -webkit-background-clip: text;
                            -webkit-text-fill-color: transparent;
                            background-clip: text;
                        }
                        .subtitle {
                            font-size: 1.2rem;
                            color: #cbd5e1;
                            margin-bottom: 3rem;
                        }
                        .games-grid {
                            display: grid;
                            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                            gap: 2rem;
                            margin-bottom: 3rem;
                        }
                        .game-card {
                            background: rgba(30, 41, 59, 0.8);
                            border: 1px solid #475569;
                            border-radius: 1rem;
                            padding: 2rem;
                            text-decoration: none;
                            color: inherit;
                            transition: all 0.3s ease;
                            backdrop-filter: blur(12px);
                        }
                        .game-card:hover {
                            transform: translateY(-8px);
                            border-color: #3b82f6;
                            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
                        }
                        .game-icon {
                            font-size: 3rem;
                            margin-bottom: 1rem;
                        }
                        .game-title {
                            font-size: 1.5rem;
                            font-weight: 600;
                            margin-bottom: 0.5rem;
                        }
                        .game-desc {
                            color: #94a3b8;
                            font-size: 0.9rem;
                            line-height: 1.5;
                        }
                        .sensor-link {
                            background: linear-gradient(135deg, #8b5cf6, #3b82f6);
                            color: white;
                            padding: 1rem 2rem;
                            border-radius: 0.5rem;
                            text-decoration: none;
                            font-weight: 600;
                            display: inline-block;
                            margin-top: 2rem;
                            transition: transform 0.3s ease;
                        }
                        .sensor-link:hover {
                            transform: translateY(-2px);
                        }
                        .info {
                            margin-top: 3rem;
                            padding: 2rem;
                            background: rgba(59, 130, 246, 0.1);
                            border: 1px solid rgba(59, 130, 246, 0.2);
                            border-radius: 1rem;
                        }
                        .info h3 {
                            color: #3b82f6;
                            margin-bottom: 1rem;
                        }
                        .info p {
                            color: #cbd5e1;
                            margin-bottom: 0.5rem;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>üöÄ Sensor Game Hub v6.0</h1>
                        <p class="subtitle">Î™®Î∞îÏùº ÏÑºÏÑúÎ°ú Ï¶êÍ∏∞Îäî ÌòÅÏã†Ï†ÅÏù∏ Í≤åÏûÑ Í≤ΩÌóò</p>
                        
                        <div class="games-grid">
                            <a href="/games/solo" class="game-card">
                                <div class="game-icon">üéØ</div>
                                <div class="game-title">Solo Game</div>
                                <div class="game-desc">1Í∞ú ÏÑºÏÑúÎ°ú ÌîåÎ†àÏù¥ÌïòÎäî Í≥µ Ï°∞Ïûë Í≤åÏûÑ<br>Î™©Ìëú ÏàòÏßë Î∞è ÏΩ§Î≥¥ ÏãúÏä§ÌÖú</div>
                            </a>
                            
                            <a href="/games/dual" class="game-card">
                                <div class="game-icon">üéÆ</div>
                                <div class="game-title">Dual Game</div>
                                <div class="game-desc">2Í∞ú ÏÑºÏÑúÎ°ú ÌòëÎ†•ÌïòÎäî ÎØ∏ÏÖò Í≤åÏûÑ<br>Í≥µÎèô Î™©Ìëú Îã¨ÏÑ± ÏãúÏä§ÌÖú</div>
                            </a>
                            
                            <a href="/games/multi" class="game-card">
                                <div class="game-icon">üë•</div>
                                <div class="game-title">Multi Game</div>
                                <div class="game-desc">ÏµúÎåÄ 8Î™Ö Ïã§ÏãúÍ∞Ñ Í≤ΩÏüÅ<br>Î¶¨ÎçîÎ≥¥Îìú Î∞è ÌÉÄÏù¥Î®∏ ÏãúÏä§ÌÖú</div>
                            </a>
                        </div>
                        
                        <a href="/sensor.html" class="sensor-link">üì± Î™®Î∞îÏùº ÏÑºÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏</a>
                        
                        <div class="info">
                            <h3>üéÆ Í≤åÏûÑ Î∞©Î≤ï</h3>
                            <p>1. PCÏóêÏÑú ÏõêÌïòÎäî Í≤åÏûÑ ÏÑ†ÌÉù</p>
                            <p>2. ÌôîÎ©¥Ïóê ÌëúÏãúÎêòÎäî 4ÏûêÎ¶¨ ÏÑ∏ÏÖò ÏΩîÎìú ÌôïÏù∏</p>
                            <p>3. Î™®Î∞îÏùºÏóêÏÑú ÏÑºÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï†ëÏÜç ÌõÑ ÏΩîÎìú ÏûÖÎ†•</p>
                            <p>4. ÏÑºÏÑú Í∂åÌïú ÌóàÏö© ÌõÑ ÏûêÎèôÏúºÎ°ú Í≤åÏûÑ ÏãúÏûë!</p>
                        </div>
                    </div>
                </body>
                </html>
            `);
        });
        
        // Í≤åÏûÑ ÎùºÏö∞Ìä∏ (ÎèôÏ†Å)
        this.app.get('/games/:gameId', (req, res) => {
            const { gameId } = req.params;
            const game = this.gameScanner.getGame(gameId);
            
            if (!game || game.status !== 'active') {
                return res.status(404).send(`
                    <h1>üéÆ Í≤åÏûÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§</h1>
                    <p>ÏöîÏ≤≠ÌïòÏã† Í≤åÏûÑ "${gameId}"ÏùÑ(Î•º) Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.</p>
                    <p><a href="/">Í≤åÏûÑ ÌóàÎ∏åÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</a></p>
                `);
            }
            
            try {
                res.sendFile(path.join(__dirname, `../public/games/${gameId}/index.html`));
            } catch (error) {
                res.status(500).send(`
                    <h1>üö® Í≤åÏûÑ Î°úÎìú Ïò§Î•ò</h1>
                    <p>Í≤åÏûÑÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.</p>
                    <p><a href="/">Í≤åÏûÑ ÌóàÎ∏åÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</a></p>
                `);
            }
        });
        
        // API ÎùºÏö∞Ìä∏
        this.app.get('/api/stats', (req, res) => {
            try {
                const stats = this.sessionManager.getStats();
                res.json({
                    success: true,
                    data: stats,
                    timestamp: Date.now()
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });
        
        // ÏÑ∏ÏÖò Ï†ïÎ≥¥ Ï°∞Ìöå
        this.app.get('/api/session/:code', (req, res) => {
            try {
                const { code } = req.params;
                const session = this.sessionManager.findSessionByCode(code);
                
                if (!session) {
                    return res.status(404).json({
                        success: false,
                        error: 'ÏÑ∏ÏÖòÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                    });
                }
                
                res.json({
                    success: true,
                    data: {
                        sessionId: session.id,
                        gameType: session.gameType,
                        state: session.state,
                        connectedSensors: session.sensors.size,
                        maxSensors: session.maxSensors
                    }
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });
        
        // AI Assistant API ÎùºÏö∞Ìä∏
        this.app.post('/api/ai/query', async (req, res) => {
            try {
                if (!this.aiAssistant) {
                    return res.status(503).json({
                        success: false,
                        error: 'AI AssistantÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.'
                    });
                }

                const { question } = req.body;
                
                if (!question || typeof question !== 'string' || question.trim() === '') {
                    return res.status(400).json({
                        success: false,
                        error: 'Ïú†Ìö®Ìïú ÏßàÎ¨∏Ïù¥ Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                console.log(`ü§î AI ÏßàÎ¨∏ ÏöîÏ≤≠: "${question}"`);
                
                // Ìó¨Ïä§ Ï≤¥ÌÅ¨ Î®ºÏ†Ä Ïã§Ìñâ
                const healthCheck = await this.aiAssistant.healthCheck();
                if (!healthCheck.success) {
                    console.error('‚ùå AI Assistant Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïã§Ìå®:', healthCheck.error);
                    return res.status(503).json({
                        success: false,
                        error: 'AI ÏÑúÎπÑÏä§Í∞Ä ÌòÑÏû¨ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.'
                    });
                }

                const result = await this.aiAssistant.query(question.trim());
                
                // Í≤∞Í≥º Í≤ÄÏ¶ù
                if (!result || typeof result !== 'object') {
                    throw new Error('AI AssistantÎ°úÎ∂ÄÌÑ∞ Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏùëÎãµÏùÑ Î∞õÏïòÏäµÎãàÎã§.');
                }

                // ÎãµÎ≥ÄÏù¥ ÎπÑÏñ¥ÏûàÎäî Í≤ΩÏö∞ Ï≤òÎ¶¨
                if (result.success && (!result.answer || result.answer.trim() === '')) {
                    result.answer = 'Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ìï¥Îãπ ÏßàÎ¨∏Ïóê ÎåÄÌïú Ï†ÅÏ†àÌïú ÎãµÎ≥ÄÏùÑ ÏÉùÏÑ±ÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§. Îã§Î•∏ Î∞©ÏãùÏúºÎ°ú ÏßàÎ¨∏Ìï¥ Ï£ºÏÑ∏Ïöî.';
                }
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå AI ÏßàÎ¨∏ Ï≤òÎ¶¨ Ïã§Ìå®:', error);
                
                // Íµ¨Ï≤¥Ï†ÅÏù∏ Ïò§Î•ò Î∂ÑÎ•ò
                let errorMessage = 'Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
                let statusCode = 500;
                
                if (error.message.includes('documents')) {
                    errorMessage = 'Î¨∏ÏÑú Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.';
                } else if (error.message.includes('embedding')) {
                    errorMessage = 'ÌÖçÏä§Ìä∏ Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.';
                } else if (error.message.includes('network') || error.message.includes('timeout')) {
                    errorMessage = 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.';
                    statusCode = 503;
                } else if (error.message.includes('API key')) {
                    errorMessage = 'AI ÏÑúÎπÑÏä§ Ïù∏Ï¶ù Ïò§Î•òÏûÖÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.';
                    statusCode = 503;
                }
                
                res.status(statusCode).json({
                    success: false,
                    error: errorMessage,
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        });

        this.app.post('/api/ai/generate-code', async (req, res) => {
            try {
                if (!this.aiAssistant) {
                    return res.status(503).json({
                        success: false,
                        error: 'AI AssistantÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const { request } = req.body;
                
                if (!request) {
                    return res.status(400).json({
                        success: false,
                        error: 'ÏΩîÎìú ÏÉùÏÑ± ÏöîÏ≤≠Ïù¥ Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                console.log(`üíª ÏΩîÎìú ÏÉùÏÑ± ÏöîÏ≤≠: "${request}"`);
                const result = await this.aiAssistant.generateCode(request);
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå ÏΩîÎìú ÏÉùÏÑ± Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.post('/api/ai/debug-help', async (req, res) => {
            try {
                if (!this.aiAssistant) {
                    return res.status(503).json({
                        success: false,
                        error: 'AI AssistantÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const { errorDescription, codeSnippet } = req.body;
                
                if (!errorDescription) {
                    return res.status(400).json({
                        success: false,
                        error: 'Ïò§Î•ò ÏÑ§Î™ÖÏù¥ Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                console.log(`üêõ ÎîîÎ≤ÑÍπÖ ÎèÑÏõÄ ÏöîÏ≤≠: "${errorDescription}"`);
                const result = await this.aiAssistant.debugHelp(errorDescription, codeSnippet);
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå ÎîîÎ≤ÑÍπÖ ÎèÑÏõÄ Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.get('/api/ai/health', async (req, res) => {
            try {
                if (!this.aiAssistant) {
                    return res.json({
                        success: false,
                        status: 'not_initialized',
                        message: 'AI AssistantÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const healthStatus = await this.aiAssistant.healthCheck();
                res.json(healthStatus);

            } catch (error) {
                console.error('‚ùå AI Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.post('/api/ai/embed-documents', async (req, res) => {
            try {
                if (!this.documentEmbedder) {
                    return res.status(503).json({
                        success: false,
                        error: 'Document EmbedderÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                console.log('üìö Î¨∏ÏÑú ÏûÑÎ≤†Îî© ÏãúÏûë...');
                const result = await this.documentEmbedder.embedAllDocuments();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå Î¨∏ÏÑú ÏûÑÎ≤†Îî© Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // AI Í≤åÏûÑ ÏÉùÏÑ± API ÎùºÏö∞Ìä∏
        this.app.post('/api/ai/generate-game', async (req, res) => {
            try {
                if (!this.aiGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'AI Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.'
                    });
                }

                const { userInput, options } = req.body;
                
                if (!userInput) {
                    return res.status(400).json({
                        success: false,
                        error: 'Í≤åÏûÑ ÏÉùÏÑ± ÏöîÏ≤≠Ïù¥ Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                console.log(`üéÆ AI Í≤åÏûÑ ÏÉùÏÑ± ÏöîÏ≤≠: "${userInput}"`);
                const result = await this.aiGameGenerator.generateGame(userInput, options || {});
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå AI Í≤åÏûÑ ÏÉùÏÑ± Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.post('/api/ai/suggest-ideas', async (req, res) => {
            try {
                if (!this.aiGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'AI Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const { category, count } = req.body;
                
                console.log(`üí° Í≤åÏûÑ ÏïÑÏù¥ÎîîÏñ¥ Ï†úÏïà ÏöîÏ≤≠: Ïπ¥ÌÖåÍ≥†Î¶¨=${category || 'all'}, Í∞úÏàò=${count || 5}`);
                const result = await this.aiGameGenerator.suggestGameIdeas(category, count);
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå Í≤åÏûÑ ÏïÑÏù¥ÎîîÏñ¥ Ï†úÏïà Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.get('/api/ai/generation-history', async (req, res) => {
            try {
                if (!this.aiGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'AI Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const limit = parseInt(req.query.limit) || 10;
                const result = this.aiGameGenerator.getGenerationHistory(limit);
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå ÏÉùÏÑ± Ïù¥Î†• Ï°∞Ìöå Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.post('/api/ai/regenerate-game', async (req, res) => {
            try {
                if (!this.aiGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'AI Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const { generationId, modifications } = req.body;
                
                if (!generationId) {
                    return res.status(400).json({
                        success: false,
                        error: 'Ïû¨ÏÉùÏÑ±Ìï† Í≤åÏûÑ IDÍ∞Ä Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                console.log(`üîÑ AI Í≤åÏûÑ Ïû¨ÏÉùÏÑ± ÏöîÏ≤≠: ${generationId}`);
                const result = await this.aiGameGenerator.regenerateGame(generationId, modifications || {});
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå AI Í≤åÏûÑ Ïû¨ÏÉùÏÑ± Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.get('/api/ai/generator-status', async (req, res) => {
            try {
                if (!this.aiGameGenerator) {
                    return res.json({
                        success: false,
                        status: 'not_initialized',
                        message: 'AI Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const status = await this.aiGameGenerator.getStatus();
                res.json(status);

            } catch (error) {
                console.error('‚ùå ÏÉùÏÑ±Í∏∞ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // Í≤åÏûÑ Ìè¥Îçî Îã§Ïö¥Î°úÎìú API
        this.app.post('/api/ai/download-game', async (req, res) => {
            try {
                const { generationId } = req.body;
                
                if (!generationId) {
                    return res.status(400).json({
                        success: false,
                        error: 'ÏÉùÏÑ± IDÍ∞Ä Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                if (!this.aiGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'AI Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                // ÏÉùÏÑ± Ïù¥Î†•ÏóêÏÑú Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞
                const history = this.aiGameGenerator.getGenerationHistory(100);
                const gameData = history.history.find(h => h.id === generationId);
                
                if (!gameData || !gameData.result.success) {
                    return res.status(404).json({
                        success: false,
                        error: 'Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                    });
                }

                const archiver = require('archiver');
                const archive = archiver('zip', { zlib: { level: 9 } });
                
                res.attachment(`${gameData.result.gameSpec.suggestedGameId}.zip`);
                archive.pipe(res);

                // Í≤åÏûÑ Î©îÏù∏ ÌååÏùº
                archive.append(gameData.result.gameCode, { name: 'index.html' });

                // Í≤åÏûÑ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÌååÏùº
                if (gameData.result.gameMetadata) {
                    archive.append(JSON.stringify(gameData.result.gameMetadata, null, 2), { name: 'game.json' });
                }

                // README ÌååÏùº
                const readmeContent = `# ${gameData.result.gameSpec.suggestedTitle}

${gameData.result.gameSpec.objective}

## Í≤åÏûÑ Ï†ïÎ≥¥
- **ID**: ${gameData.result.gameSpec.suggestedGameId}  
- **ÌÉÄÏûÖ**: ${gameData.result.gameSpec.gameType}
- **Ïû•Î•¥**: ${gameData.result.gameSpec.genre}
- **ÏÑºÏÑú**: ${gameData.result.gameSpec.sensorMechanics.join(', ')}
- **ÎÇúÏù¥ÎèÑ**: ${gameData.result.gameSpec.difficulty}

## Í≤åÏûÑ Í∑úÏπô
${gameData.result.gameSpec.rules.map(rule => `- ${rule}`).join('\n')}

## Ïã§Ìñâ Î∞©Î≤ï
1. index.html ÌååÏùºÏùÑ Ïõπ ÏÑúÎ≤ÑÏóêÏÑú Ïã§Ìñâ
2. Î™®Î∞îÏùºÏóêÏÑú Sensor Game Hub ÏÑºÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï†ëÏÜç
3. Í≤åÏûÑÏóêÏÑú ÏÉùÏÑ±Îêú 4ÏûêÎ¶¨ ÏÑ∏ÏÖò ÏΩîÎìú ÏûÖÎ†•
4. Í≤åÏûÑ ÏãúÏûë!

## ÏõêÎ≥∏ ÏöîÏ≤≠
"${gameData.result.metadata.originalInput}"

---
ü§ñ AIÎ°ú ÏÉùÏÑ±Îêú Í≤åÏûÑÏûÖÎãàÎã§.
ÏÉùÏÑ± ÏãúÍ∞Ñ: ${new Date(gameData.result.metadata.timestamp).toLocaleString()}
`;
                archive.append(readmeContent, { name: 'README.md' });

                archive.finalize();

            } catch (error) {
                console.error('‚ùå Í≤åÏûÑ Îã§Ïö¥Î°úÎìú Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.get('/api/ai/knowledge-status', async (req, res) => {
            try {
                if (!this.aiAssistant) {
                    return res.status(503).json({
                        success: false,
                        error: 'AI AssistantÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const status = await this.aiAssistant.getKnowledgeBaseStatus();
                res.json(status);

            } catch (error) {
                console.error('‚ùå ÏßÄÏãùÎ≤†Ïù¥Ïä§ ÏÉÅÌÉú Ï°∞Ìöå Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞ API ÎùºÏö∞Ìä∏
        this.app.post('/api/ai/interactive/start-session', async (req, res) => {
            try {
                if (!this.interactiveGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.'
                    });
                }

                const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                const result = await this.interactiveGameGenerator.startNewSession(sessionId);
                
                res.json(result);

            } catch (error) {
                console.error('ÎåÄÌôîÌòï ÏÑ∏ÏÖò ÏãúÏûë Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.post('/api/ai/interactive/message', async (req, res) => {
            try {
                if (!this.interactiveGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const { sessionId, message } = req.body;
                
                if (!sessionId || !message) {
                    return res.status(400).json({
                        success: false,
                        error: 'sessionIdÏôÄ messageÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.'
                    });
                }

                const result = await this.interactiveGameGenerator.processUserMessage(sessionId, message);
                res.json(result);

            } catch (error) {
                console.error('ÎåÄÌôîÌòï Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.post('/api/ai/interactive/generate', async (req, res) => {
            try {
                if (!this.interactiveGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const { sessionId } = req.body;
                
                if (!sessionId) {
                    return res.status(400).json({
                        success: false,
                        error: 'sessionIdÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.'
                    });
                }

                const result = await this.interactiveGameGenerator.generateFinalGame(sessionId);
                
                // Í≤åÏûÑÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÍ≥† Ï†ÄÏû•ÎêòÏóàÎã§Î©¥ Í≤åÏûÑ Ïä§Ï∫êÎÑà Ïû¨Ïã§Ìñâ
                if (result.success && result.gamePath) {
                    console.log('üîÑ ÏÉàÎ°úÏö¥ Í≤åÏûÑ ÏÉùÏÑ± ÏôÑÎ£å - Í≤åÏûÑ Ïä§Ï∫êÎÑà Ïû¨Ïã§Ìñâ Ï§ë...');
                    try {
                        // Í≤åÏûÑ Ïä§Ï∫êÎÑà Ïû¨Ïã§Ìñâ
                        await this.rescanGames();
                        console.log('‚úÖ Í≤åÏûÑ Ïä§Ï∫êÎÑà Ïû¨Ïã§Ìñâ ÏôÑÎ£å - ÏÉà Í≤åÏûÑÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.');
                        
                        // Í≤∞Í≥ºÏóê Îì±Î°ù ÏÑ±Í≥µ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
                        result.gameRegistered = true;
                        result.message = 'Í≤åÏûÑÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÍ≥† Îì±Î°ùÎêòÏóàÏäµÎãàÎã§! Ïù¥Ï†ú Í≤åÏûÑ ÌóàÎ∏åÏóêÏÑú ÌîåÎ†àÏù¥Ìï† Ïàò ÏûàÏäµÎãàÎã§.';
                        
                    } catch (scanError) {
                        console.error('‚ö†Ô∏è Í≤åÏûÑ Ïä§Ï∫êÎÑà Ïû¨Ïã§Ìñâ Ïã§Ìå®:', scanError);
                        result.gameRegistered = false;
                        result.warning = 'Í≤åÏûÑÏù¥ ÏÉùÏÑ±ÎêòÏóàÏßÄÎßå ÏûêÎèô Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÏàòÎèôÏúºÎ°ú ÏÉàÎ°úÍ≥†Ïπ®Ìï¥ Ï£ºÏÑ∏Ïöî.';
                    }
                }
                
                res.json(result);

            } catch (error) {
                console.error('ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ± Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.get('/api/ai/interactive/session/:sessionId', async (req, res) => {
            try {
                if (!this.interactiveGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const { sessionId } = req.params;
                const session = this.interactiveGameGenerator.getSession(sessionId);
                
                if (!session) {
                    return res.status(404).json({
                        success: false,
                        error: 'ÏÑ∏ÏÖòÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                    });
                }

                res.json({
                    success: true,
                    session: {
                        id: session.id,
                        stage: session.stage,
                        progress: this.interactiveGameGenerator.getStageProgress(session.stage),
                        requirements: session.gameRequirements,
                        conversationHistory: session.conversationHistory,
                        createdAt: session.createdAt,
                        lastUpdated: session.lastUpdated
                    }
                });

            } catch (error) {
                console.error('ÏÑ∏ÏÖò Ï°∞Ìöå Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.delete('/api/ai/interactive/session/:sessionId', async (req, res) => {
            try {
                if (!this.interactiveGameGenerator) {
                    return res.status(503).json({
                        success: false,
                        error: 'ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const { sessionId } = req.params;
                const deleted = this.interactiveGameGenerator.cleanupSession(sessionId);
                
                res.json({
                    success: true,
                    deleted: deleted,
                    message: deleted ? 'ÏÑ∏ÏÖòÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.' : 'ÏÑ∏ÏÖòÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                });

            } catch (error) {
                console.error('ÏÑ∏ÏÖò ÏÇ≠Ï†ú Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        this.app.get('/api/ai/interactive/health', async (req, res) => {
            try {
                if (!this.interactiveGameGenerator) {
                    return res.json({
                        success: false,
                        status: 'not_initialized',
                        error: 'ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
                    });
                }

                const result = await this.interactiveGameGenerator.healthCheck();
                res.json(result);

            } catch (error) {
                console.error('ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });
        
        // 404 Ìï∏Îì§Îü¨
        this.app.use((req, res) => {
            res.status(404).send(`
                <h1>404 - ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§</h1>
                <p><a href="/">ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</a></p>
            `);
        });
    }
    
    /**
     * Í≤åÏûÑ Ïä§Ï∫î Ï¥àÍ∏∞Ìôî
     */
    async initializeGames() {
        try {
            await this.gameScanner.scanGames();
            console.log('‚úÖ Í≤åÏûÑ Ïä§Ï∫î ÏôÑÎ£å');
        } catch (error) {
            console.error('‚ùå Í≤åÏûÑ Ïä§Ï∫î Ïã§Ìå®:', error.message);
        }
    }
    
    /**
     * AI Assistant Ï¥àÍ∏∞Ìôî
     */
    async initializeAI() {
        try {
            console.log('ü§ñ AI Assistant Ï¥àÍ∏∞Ìôî Ï§ë...');
            
            // Interactive Game GeneratorÎäî Ìï≠ÏÉÅ Ï¥àÍ∏∞Ìôî (ÎçîÎØ∏ Î™®Îìú ÏßÄÏõê)
            this.interactiveGameGenerator = new InteractiveGameGenerator();
            await this.interactiveGameGenerator.initialize();
            
            // ÌôòÍ≤ΩÎ≥ÄÏàò ÌôïÏù∏
            if (!process.env.CLAUDE_API_KEY || !process.env.OPENAI_API_KEY || 
                !process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
                console.log('‚ö†Ô∏è AI Í¥ÄÎ†® ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïÑ AI AssistantÎ•º Í±¥ÎÑàÎúÅÎãàÎã§.');
                console.log('‚úÖ Interactive Game GeneratorÎäî Îç∞Î™® Î™®ÎìúÎ°ú ÎèôÏûëÌï©ÎãàÎã§.');
                return;
            }
            
            // AI Assistant Ï¥àÍ∏∞Ìôî
            this.aiAssistant = new AIAssistant();
            await this.aiAssistant.initialize();
            
            // Document Embedder Ï¥àÍ∏∞Ìôî
            this.documentEmbedder = new DocumentEmbedder();
            
            // AI Game Generator Ï¥àÍ∏∞Ìôî
            this.aiGameGenerator = new AIGameGenerator();
            await this.aiGameGenerator.initialize();
            
            // ÏûêÎèô Î¨∏ÏÑú ÏûÑÎ≤†Îî© Ïã§Ìñâ
            await this.autoEmbedDocuments();
            
            console.log('‚úÖ AI Assistant Î∞è Í≤åÏûÑ ÏÉùÏÑ±Í∏∞ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
            
        } catch (error) {
            console.error('‚ùå AI Assistant Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error.message);
            // Interactive Game GeneratorÎäî Ïú†ÏßÄ (ÎçîÎØ∏ Î™®ÎìúÎ°ú ÎèôÏûë)
            this.aiAssistant = null;
            this.documentEmbedder = null;
            this.aiGameGenerator = null;
        }
    }
    
    /**
     * ÏûêÎèô Î¨∏ÏÑú ÏûÑÎ≤†Îî© Ïã§Ìñâ
     */
    async autoEmbedDocuments() {
        try {
            if (!this.documentEmbedder) {
                console.log('‚ö†Ô∏è DocumentEmbedderÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïÑ ÏûÑÎ≤†Îî©ÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§.');
                return;
            }

            console.log('üîç Í∏∞Ï°¥ ÏûÑÎ≤†Îî© Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ Ï§ë...');
            
            // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
            const stats = await this.documentEmbedder.getEmbeddingStats();
            
            if (stats && stats.total > 0) {
                console.log(`üìä Í∏∞Ï°¥ ÏûÑÎ≤†Îî© Îç∞Ïù¥ÌÑ∞ Î∞úÍ≤¨: ${stats.total}Í∞ú Î¨∏ÏÑú`);
                console.log('‚úÖ ÏûÑÎ≤†Îî© Í±¥ÎÑàÎúÄ (Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)');
                return;
            }
            
            console.log('üìö ÏÉàÎ°úÏö¥ Î¨∏ÏÑú ÏûÑÎ≤†Îî© ÏãúÏûë...');
            const result = await this.documentEmbedder.embedAllDocuments();
            
            if (result.success) {
                console.log('‚úÖ ÏûêÎèô ÏûÑÎ≤†Îî© ÏôÑÎ£å!');
                console.log(`üìä Ï¥ù ${result.stats.total}Í∞ú Î¨∏ÏÑúÍ∞Ä ÏûÑÎ≤†Îî©ÎêòÏóàÏäµÎãàÎã§.`);
            } else {
                console.log('‚ö†Ô∏è ÏûÑÎ≤†Îî© Ï§ë ÏùºÎ∂Ä Ïò§Î•ò Î∞úÏÉù, Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§.');
            }
            
        } catch (error) {
            console.error('‚ùå ÏûêÎèô ÏûÑÎ≤†Îî© Ïã§Ìå®:', error.message);
            console.log('‚ö†Ô∏è ÏûÑÎ≤†Îî© Ïã§Ìå®ÌñàÏßÄÎßå ÏÑúÎ≤ÑÎäî Í≥ÑÏÜç Ïã§ÌñâÎê©ÎãàÎã§.');
        }
    }
    
    /**
     * ÎèôÏ†Å ÌôàÌéòÏù¥ÏßÄ ÏÉùÏÑ±
     */
    generateHomePage(games) {
        const gameCards = games.map(game => `
            <a href="${game.path}" class="game-card">
                <div class="game-icon">${game.icon}</div>
                <div class="game-title">${game.title}</div>
                <div class="game-desc">${game.description}</div>
                ${game.featured ? '<div class="featured-badge">‚≠ê Ï∂îÏ≤ú</div>' : ''}
                ${game.experimental ? '<div class="experimental-badge">üß™ Ïã§ÌóòÏ†Å</div>' : ''}
            </a>
        `).join('');
        
        const stats = this.gameScanner.getStats();
        
        return `
            <!DOCTYPE html>
            <html lang="ko">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>üöÄ Sensor Game Hub v6.0</title>
                <style>
                    body {
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        background: linear-gradient(135deg, #0f172a, #1e293b);
                        color: #f8fafc;
                        margin: 0;
                        padding: 2rem;
                        min-height: 100vh;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: center;
                    }
                    .container {
                        max-width: 1200px;
                        text-align: center;
                    }
                    h1 {
                        font-size: 3rem;
                        margin-bottom: 1rem;
                        background: linear-gradient(135deg, #3b82f6, #8b5cf6);
                        -webkit-background-clip: text;
                        -webkit-text-fill-color: transparent;
                        background-clip: text;
                    }
                    .subtitle {
                        font-size: 1.2rem;
                        color: #cbd5e1;
                        margin-bottom: 1rem;
                    }
                    .stats {
                        font-size: 0.9rem;
                        color: #94a3b8;
                        margin-bottom: 3rem;
                    }
                    .games-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                        gap: 2rem;
                        margin-bottom: 3rem;
                    }
                    .game-card {
                        background: rgba(30, 41, 59, 0.8);
                        border: 1px solid #475569;
                        border-radius: 1rem;
                        padding: 2rem;
                        text-decoration: none;
                        color: inherit;
                        transition: all 0.3s ease;
                        backdrop-filter: blur(12px);
                        position: relative;
                        overflow: hidden;
                    }
                    .game-card:hover {
                        transform: translateY(-8px);
                        border-color: #3b82f6;
                        box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
                    }
                    .game-icon {
                        font-size: 3rem;
                        margin-bottom: 1rem;
                    }
                    .game-title {
                        font-size: 1.5rem;
                        font-weight: 600;
                        margin-bottom: 0.5rem;
                    }
                    .game-desc {
                        color: #94a3b8;
                        font-size: 0.9rem;
                        line-height: 1.5;
                    }
                    .featured-badge {
                        position: absolute;
                        top: 1rem;
                        right: 1rem;
                        background: linear-gradient(135deg, #f59e0b, #d97706);
                        color: white;
                        padding: 0.25rem 0.75rem;
                        border-radius: 1rem;
                        font-size: 0.7rem;
                        font-weight: 600;
                    }
                    .experimental-badge {
                        position: absolute;
                        top: 3rem;
                        right: 1rem;
                        background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                        color: white;
                        padding: 0.25rem 0.75rem;
                        border-radius: 1rem;
                        font-size: 0.7rem;
                        font-weight: 600;
                    }
                    .sensor-link {
                        background: linear-gradient(135deg, #8b5cf6, #3b82f6);
                        color: white;
                        padding: 1rem 2rem;
                        border-radius: 0.5rem;
                        text-decoration: none;
                        font-weight: 600;
                        display: inline-block;
                        margin-top: 2rem;
                        transition: transform 0.3s ease;
                    }
                    .sensor-link:hover {
                        transform: translateY(-2px);
                    }
                    .info {
                        margin-top: 3rem;
                        padding: 2rem;
                        background: rgba(59, 130, 246, 0.1);
                        border: 1px solid rgba(59, 130, 246, 0.2);
                        border-radius: 1rem;
                    }
                    .info h3 {
                        color: #3b82f6;
                        margin-bottom: 1rem;
                    }
                    .info p {
                        color: #cbd5e1;
                        margin-bottom: 0.5rem;
                    }
                    .developer-info {
                        margin-top: 2rem;
                        padding: 1.5rem;
                        background: rgba(16, 185, 129, 0.1);
                        border: 1px solid rgba(16, 185, 129, 0.2);
                        border-radius: 1rem;
                        text-align: left;
                    }
                    .developer-info h4 {
                        color: #10b981;
                        margin-bottom: 1rem;
                    }
                    .api-link {
                        color: #10b981;
                        text-decoration: none;
                        font-family: monospace;
                        background: rgba(16, 185, 129, 0.1);
                        padding: 0.25rem 0.5rem;
                        border-radius: 0.25rem;
                        margin: 0 0.25rem;
                    }
                    .ai-chat-btn {
                        background: linear-gradient(135deg, #6366f1, #8b5cf6);
                        color: white;
                        padding: 0.75rem 1.5rem;
                        border-radius: 0.5rem;
                        text-decoration: none;
                        font-weight: 600;
                        display: inline-block;
                        margin: 1rem 0.5rem 0.5rem 0;
                        transition: all 0.3s ease;
                        border: none;
                        cursor: pointer;
                    }
                    .ai-chat-btn:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
                    }
                    .developer-actions {
                        margin-top: 1.5rem;
                        padding-top: 1.5rem;
                        border-top: 1px solid rgba(16, 185, 129, 0.2);
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üöÄ Sensor Game Hub v6.0</h1>
                    <p class="subtitle">Î™®Î∞îÏùº ÏÑºÏÑúÎ°ú Ï¶êÍ∏∞Îäî ÌòÅÏã†Ï†ÅÏù∏ Í≤åÏûÑ Í≤ΩÌóò</p>
                    <p class="stats">
                        Ï¥ù ${stats.total}Í∞ú Í≤åÏûÑ | 
                        ÏÜîÎ°ú: ${stats.categories.solo || 0}Í∞ú | 
                        ÎìÄÏñº: ${stats.categories.dual || 0}Í∞ú | 
                        Î©ÄÌã∞: ${stats.categories.multi || 0}Í∞ú
                        ${stats.experimental > 0 ? ` | Ïã§ÌóòÏ†Å: ${stats.experimental}Í∞ú` : ''}
                    </p>
                    
                    <div class="games-grid">
                        ${gameCards}
                    </div>
                    
                    <a href="/sensor.html" class="sensor-link">üì± Î™®Î∞îÏùº ÏÑºÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏</a>
                    
                    <div class="info">
                        <h3>üéÆ Í≤åÏûÑ Î∞©Î≤ï</h3>
                        <p>1. PCÏóêÏÑú ÏõêÌïòÎäî Í≤åÏûÑ ÏÑ†ÌÉù</p>
                        <p>2. ÌôîÎ©¥Ïóê ÌëúÏãúÎêòÎäî 4ÏûêÎ¶¨ ÏÑ∏ÏÖò ÏΩîÎìú ÌôïÏù∏</p>
                        <p>3. Î™®Î∞îÏùºÏóêÏÑú ÏÑºÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï†ëÏÜç ÌõÑ ÏΩîÎìú ÏûÖÎ†•</p>
                        <p>4. ÏÑºÏÑú Í∂åÌïú ÌóàÏö© ÌõÑ ÏûêÎèôÏúºÎ°ú Í≤åÏûÑ ÏãúÏûë!</p>
                    </div>
                    
                    <div class="developer-info">
                        <h4>üõ†Ô∏è Í∞úÎ∞úÏûê ÎèÑÍµ¨</h4>
                        <p><strong>Í≤åÏûÑ API:</strong> 
                            <a href="/api/games" class="api-link">/api/games</a>
                            <a href="/api/admin/rescan" class="api-link">/api/admin/rescan</a>
                        </p>
                        <p><strong>ÏÉà Í≤åÏûÑ Ï∂îÍ∞Ä:</strong> <code>games/</code> Ìè¥ÎçîÏóê Í≤åÏûÑÏùÑ Ï∂îÍ∞ÄÌïòÍ≥† <code>game.json</code> ÌååÏùºÏùÑ ÏÉùÏÑ±ÌïòÏÑ∏Ïöî</p>
                        <p><strong>ÏûêÎèô Ïä§Ï∫î:</strong> ÏÑúÎ≤Ñ Ïû¨ÏãúÏûë Ïãú ÏûêÎèôÏúºÎ°ú ÏÉà Í≤åÏûÑÏù¥ Í∞êÏßÄÎê©ÎãàÎã§</p>
                        
                        <div class="developer-actions">
                            <h5 style="color: #6366f1; margin-bottom: 1rem;">ü§ñ AI Í∞úÎ∞ú ÎèÑÏö∞ÎØ∏</h5>
                            <p style="margin-bottom: 1rem;">Í≤åÏûÑ Í∞úÎ∞ú ÏßàÎ¨∏, ÏΩîÎìú ÏÉùÏÑ±, ÎîîÎ≤ÑÍπÖ ÎèÑÏõÄÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî!</p>
                            <a href="/interactive-game-generator" class="ai-chat-btn" style="background: linear-gradient(135deg, #f59e0b, #d97706);">üéØ ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞</a>
                            <a href="/ai-assistant" class="ai-chat-btn">üí¨ AI Ï±ÑÌåÖ ÏÉÅÎã¥ÌïòÍ∏∞</a>
                            <a href="/developer-guide" class="ai-chat-btn" style="background: linear-gradient(135deg, #059669, #10b981);">üìö Í∞úÎ∞úÏûê Í∞ÄÏù¥Îìú</a>
                        </div>
                    </div>
                </div>
            </body>
            </html>
        `;
    }
    
    /**
     * AI Assistant ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
     */
    generateAIAssistantPage() {
        return `
            <!DOCTYPE html>
            <html lang="ko">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>ü§ñ AI Í∞úÎ∞ú ÎèÑÏö∞ÎØ∏ - Sensor Game Hub</title>
                <style>
                    :root {
                        --primary: #3b82f6;
                        --secondary: #8b5cf6;
                        --success: #10b981;
                        --warning: #f59e0b;
                        --error: #ef4444;
                        --background: #0f172a;
                        --surface: #1e293b;
                        --card: #334155;
                        --text-primary: #f8fafc;
                        --text-secondary: #cbd5e1;
                        --text-muted: #94a3b8;
                        --border: #475569;
                    }
                    
                    * {
                        margin: 0;
                        padding: 0;
                        box-sizing: border-box;
                    }
                    
                    body {
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        background: var(--background);
                        color: var(--text-primary);
                        height: 100vh;
                        display: flex;
                        flex-direction: column;
                    }
                    
                    .header {
                        background: var(--surface);
                        border-bottom: 1px solid var(--border);
                        padding: 1rem 2rem;
                        display: flex;
                        justify-content: between;
                        align-items: center;
                    }
                    
                    .header h1 {
                        background: linear-gradient(135deg, var(--primary), var(--secondary));
                        -webkit-background-clip: text;
                        -webkit-text-fill-color: transparent;
                        background-clip: text;
                        font-size: 1.5rem;
                    }
                    
                    .nav-links {
                        display: flex;
                        gap: 1rem;
                    }
                    
                    .nav-link {
                        color: var(--text-secondary);
                        text-decoration: none;
                        padding: 0.5rem 1rem;
                        border-radius: 0.5rem;
                        transition: all 0.3s ease;
                    }
                    
                    .nav-link:hover {
                        background: rgba(59, 130, 246, 0.1);
                        color: var(--primary);
                    }
                    
                    .chat-container {
                        flex: 1;
                        display: flex;
                        flex-direction: column;
                        max-width: 1200px;
                        margin: 0 auto;
                        width: 100%;
                        padding: 2rem;
                    }
                    
                    .chat-messages {
                        flex: 1;
                        overflow-y: auto;
                        padding: 1rem;
                        background: var(--surface);
                        border-radius: 1rem;
                        margin-bottom: 1rem;
                        min-height: 500px;
                        max-height: 600px;
                    }
                    
                    .message {
                        margin-bottom: 1.5rem;
                        display: flex;
                        align-items: flex-start;
                        gap: 0.75rem;
                    }
                    
                    .message.user {
                        flex-direction: row-reverse;
                    }
                    
                    .message-avatar {
                        width: 40px;
                        height: 40px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 1.2rem;
                        flex-shrink: 0;
                    }
                    
                    .message.user .message-avatar {
                        background: linear-gradient(135deg, var(--primary), var(--secondary));
                    }
                    
                    .message.ai .message-avatar {
                        background: linear-gradient(135deg, var(--success), #059669);
                    }
                    
                    .message-content {
                        background: var(--card);
                        padding: 1rem;
                        border-radius: 1rem;
                        max-width: 70%;
                        word-wrap: break-word;
                    }
                    
                    .message.user .message-content {
                        background: linear-gradient(135deg, var(--primary), var(--secondary));
                    }
                    
                    .message pre {
                        background: rgba(0, 0, 0, 0.3);
                        padding: 1rem;
                        border-radius: 0.5rem;
                        overflow-x: auto;
                        margin: 0.5rem 0;
                        font-size: 0.9rem;
                    }
                    
                    .chat-input {
                        display: flex;
                        gap: 1rem;
                        align-items: flex-end;
                    }
                    
                    .input-group {
                        flex: 1;
                        display: flex;
                        flex-direction: column;
                        gap: 0.5rem;
                    }
                    
                    .quick-actions {
                        display: flex;
                        gap: 0.5rem;
                        flex-wrap: wrap;
                    }
                    
                    .quick-btn {
                        background: rgba(59, 130, 246, 0.1);
                        color: var(--primary);
                        border: 1px solid var(--primary);
                        padding: 0.25rem 0.75rem;
                        border-radius: 1rem;
                        font-size: 0.8rem;
                        cursor: pointer;
                        transition: all 0.3s ease;
                    }
                    
                    .quick-btn:hover {
                        background: var(--primary);
                        color: white;
                    }
                    
                    #messageInput {
                        background: var(--surface);
                        border: 1px solid var(--border);
                        border-radius: 0.75rem;
                        padding: 1rem;
                        color: var(--text-primary);
                        font-family: inherit;
                        resize: vertical;
                        min-height: 80px;
                        max-height: 200px;
                    }
                    
                    #messageInput:focus {
                        outline: none;
                        border-color: var(--primary);
                        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
                    }
                    
                    .send-btn {
                        background: linear-gradient(135deg, var(--primary), var(--secondary));
                        color: white;
                        border: none;
                        padding: 1rem 2rem;
                        border-radius: 0.75rem;
                        font-weight: 600;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        height: fit-content;
                    }
                    
                    .send-btn:hover:not(:disabled) {
                        transform: translateY(-2px);
                        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
                    }
                    
                    .send-btn:disabled {
                        opacity: 0.6;
                        cursor: not-allowed;
                    }
                    
                    .loading {
                        display: none;
                        color: var(--text-muted);
                        font-style: italic;
                        padding: 1rem;
                    }
                    
                    .welcome-message {
                        text-align: center;
                        padding: 2rem;
                        color: var(--text-muted);
                    }
                    
                    .welcome-message h2 {
                        color: var(--primary);
                        margin-bottom: 1rem;
                    }
                    
                    .status-indicator {
                        display: inline-block;
                        width: 8px;
                        height: 8px;
                        border-radius: 50%;
                        margin-right: 0.5rem;
                    }
                    
                    .status-online {
                        background: var(--success);
                    }
                    
                    .status-offline {
                        background: var(--error);
                    }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>ü§ñ AI Í∞úÎ∞ú ÎèÑÏö∞ÎØ∏</h1>
                    <div class="nav-links">
                        <span class="status-indicator" id="aiStatus"></span>
                        <span id="statusText">Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë...</span>
                        <a href="/developer-guide" class="nav-link">üìö Í∞úÎ∞úÏûê Í∞ÄÏù¥Îìú</a>
                        <a href="/" class="nav-link">üè† ÌôàÏúºÎ°ú</a>
                    </div>
                </div>
                
                <div class="chat-container">
                    <div class="chat-messages" id="chatMessages">
                        <div class="welcome-message">
                            <h2>üëã ÏïàÎÖïÌïòÏÑ∏Ïöî!</h2>
                            <p>Sensor Game Hub Í∞úÎ∞úÏùÑ ÎèÑÏôÄÎìúÎ¶¨Îäî AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§.</p>
                            <p>Í≤åÏûÑ Í∞úÎ∞ú ÏßàÎ¨∏, ÏΩîÎìú ÏÉùÏÑ±, ÎîîÎ≤ÑÍπÖ ÎèÑÏõÄ Îì± Î¨¥ÏóáÏù¥Îì† Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî!</p>
                        </div>
                    </div>
                    
                    <div class="loading" id="loadingIndicator">
                        ü§ñ AIÍ∞Ä ÎãµÎ≥ÄÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...
                    </div>
                    
                    <div class="chat-input">
                        <div class="input-group">
                            <div class="quick-actions">
                                <button class="quick-btn" onclick="insertQuickQuestion('ÏÉà Í≤åÏûÑÏùÑ ÎßåÎì§Í≥† Ïã∂Ïñ¥Ïöî')">üéÆ ÏÉà Í≤åÏûÑ ÎßåÎì§Í∏∞</button>
                                <button class="quick-btn" onclick="insertQuickQuestion('ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî')">üì± ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞</button>
                                <button class="quick-btn" onclick="insertQuickQuestion('SessionSDK ÏÇ¨Ïö©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî')">üîß SDK ÏÇ¨Ïö©Î≤ï</button>
                                <button class="quick-btn" onclick="insertQuickQuestion('ÎîîÎ≤ÑÍπÖ ÎèÑÏõÄÏù¥ ÌïÑÏöîÌï¥Ïöî')">üêõ ÎîîÎ≤ÑÍπÖ</button>
                            </div>
                            <textarea 
                                id="messageInput" 
                                placeholder="Í≤åÏûÑ Í∞úÎ∞úÏóê ÎåÄÌï¥ Í∂ÅÍ∏àÌïú Í≤ÉÏùÑ Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî..." 
                                onkeydown="handleKeyDown(event)"></textarea>
                        </div>
                        <button class="send-btn" id="sendBtn" onclick="sendMessage()">Ï†ÑÏÜ°</button>
                    </div>
                </div>

                <script>
                    let chatHistory = JSON.parse(localStorage.getItem('aiChatHistory') || '[]');
                    
                    // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
                    document.addEventListener('DOMContentLoaded', function() {
                        checkAIStatus();
                        loadChatHistory();
                        checkURLParams();
                    });
                    
                    // AI ÏÉÅÌÉú ÌôïÏù∏
                    async function checkAIStatus() {
                        try {
                            const response = await fetch('/api/ai/health');
                            const result = await response.json();
                            
                            const statusIndicator = document.getElementById('aiStatus');
                            const statusText = document.getElementById('statusText');
                            
                            if (result.success && result.status === 'healthy') {
                                statusIndicator.className = 'status-indicator status-online';
                                statusText.textContent = 'AI Ï§ÄÎπÑ ÏôÑÎ£å';
                            } else {
                                statusIndicator.className = 'status-indicator status-offline';
                                statusText.textContent = 'AI ÏÑúÎπÑÏä§ Î∂àÍ∞Ä';
                            }
                        } catch (error) {
                            document.getElementById('aiStatus').className = 'status-indicator status-offline';
                            document.getElementById('statusText').textContent = 'AI ÏÑúÎπÑÏä§ Ïò§Î•ò';
                        }
                    }
                    
                    // Ï±ÑÌåÖ Í∏∞Î°ù Î°úÎìú
                    function loadChatHistory() {
                        const messagesContainer = document.getElementById('chatMessages');
                        
                        if (chatHistory.length === 0) {
                            return; // Welcome message Ïú†ÏßÄ
                        }
                        
                        messagesContainer.innerHTML = '';
                        
                        chatHistory.forEach(msg => {
                            addMessageToUI(msg.content, msg.type, false);
                        });
                        
                        scrollToBottom();
                    }
                    
                    // URL ÌååÎùºÎØ∏ÌÑ∞ ÌôïÏù∏ Î∞è ÏûêÎèô Î©îÏãúÏßÄ Ï†ÑÏÜ°
                    function checkURLParams() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const question = urlParams.get('q');
                        
                        if (question) {
                            // URLÏóêÏÑú ÏßàÎ¨∏ ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞ (Îí§Î°úÍ∞ÄÍ∏∞ Ïãú Ï§ëÎ≥µ Ï†ÑÏÜ° Î∞©ÏßÄ)
                            const newUrl = window.location.pathname;
                            window.history.replaceState({}, document.title, newUrl);
                            
                            // ÏûÖÎ†•Ï∞ΩÏóê ÏßàÎ¨∏ ÏÑ§Ï†ïÌïòÍ≥† ÏûêÎèô Ï†ÑÏÜ°
                            const input = document.getElementById('messageInput');
                            input.value = decodeURIComponent(question);
                            
                            // Ïû†Ïãú ÌõÑ ÏûêÎèô Ï†ÑÏÜ° (UIÍ∞Ä ÏôÑÏ†ÑÌûà Î°úÎìúÎêú ÌõÑ)
                            setTimeout(() => {
                                sendMessage();
                            }, 500);
                        }
                    }
                    
                    // Ï±ÑÌåÖ Í∏∞Î°ù Ï†ÄÏû•
                    function saveChatHistory() {
                        localStorage.setItem('aiChatHistory', JSON.stringify(chatHistory));
                    }
                    
                    // Îπ†Î•∏ ÏßàÎ¨∏ ÏÇΩÏûÖ
                    function insertQuickQuestion(question) {
                        document.getElementById('messageInput').value = question;
                        document.getElementById('messageInput').focus();
                    }
                    
                    // ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
                    function handleKeyDown(event) {
                        if (event.key === 'Enter' && !event.shiftKey) {
                            event.preventDefault();
                            sendMessage();
                        }
                    }
                    
                    // Î©îÏãúÏßÄ Ï†ÑÏÜ°
                    async function sendMessage() {
                        const input = document.getElementById('messageInput');
                        const message = input.value.trim();
                        
                        if (!message) return;
                        
                        // UIÏóê ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ Ï∂îÍ∞Ä
                        addMessageToUI(message, 'user');
                        chatHistory.push({ content: message, type: 'user', timestamp: new Date().toISOString() });
                        
                        // ÏûÖÎ†•Ï∞Ω Ï¥àÍ∏∞Ìôî Î∞è Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
                        input.value = '';
                        document.getElementById('sendBtn').disabled = true;
                        document.getElementById('loadingIndicator').style.display = 'block';
                        
                        try {
                            // AI API Ìò∏Ï∂ú
                            const response = await fetch('/api/ai/query', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ question: message })
                            });
                            
                            const result = await response.json();
                            
                            if (result.success) {
                                addMessageToUI(result.answer, 'ai');
                                chatHistory.push({ content: result.answer, type: 'ai', timestamp: new Date().toISOString() });
                            } else {
                                addMessageToUI('Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + result.error, 'ai');
                            }
                            
                        } catch (error) {
                            addMessageToUI('ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.', 'ai');
                        } finally {
                            document.getElementById('sendBtn').disabled = false;
                            document.getElementById('loadingIndicator').style.display = 'none';
                            saveChatHistory();
                        }
                    }
                    
                    // UIÏóê Î©îÏãúÏßÄ Ï∂îÍ∞Ä
                    function addMessageToUI(content, type, scroll = true) {
                        const messagesContainer = document.getElementById('chatMessages');
                        
                        // Welcome message Ï†úÍ±∞
                        const welcomeMsg = messagesContainer.querySelector('.welcome-message');
                        if (welcomeMsg) {
                            welcomeMsg.remove();
                        }
                        
                        const messageDiv = document.createElement('div');
                        messageDiv.className = \`message \${type}\`;
                        
                        const avatar = type === 'user' ? 'üë§' : 'ü§ñ';
                        
                        messageDiv.innerHTML = \`
                            <div class="message-avatar">\${avatar}</div>
                            <div class="message-content">\${formatMessage(content)}</div>
                        \`;
                        
                        messagesContainer.appendChild(messageDiv);
                        
                        if (scroll) {
                            scrollToBottom();
                        }
                    }
                    
                    // Î©îÏãúÏßÄ Ìè¨Îß∑ÌåÖ
                    function formatMessage(content) {
                        // ÏΩîÎìú Î∏îÎ°ù Ï≤òÎ¶¨
                        content = content.replace(/\`\`\`([\\s\\S]*?)\`\`\`/g, '<pre><code>$1</code></pre>');
                        
                        // Ïù∏ÎùºÏù∏ ÏΩîÎìú Ï≤òÎ¶¨
                        content = content.replace(/\`(.+?)\`/g, '<code style="background: rgba(0,0,0,0.3); padding: 0.2rem 0.4rem; border-radius: 0.25rem;">$1</code>');
                        
                        // Ï§ÑÎ∞îÍøà Ï≤òÎ¶¨
                        content = content.replace(/\\n/g, '<br>');
                        
                        return content;
                    }
                    
                    // Ïä§ÌÅ¨Î°§ÏùÑ ÏïÑÎûòÎ°ú
                    function scrollToBottom() {
                        const messagesContainer = document.getElementById('chatMessages');
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    }
                    
                    // Ï±ÑÌåÖ Í∏∞Î°ù Ï¥àÍ∏∞Ìôî
                    function clearHistory() {
                        if (confirm('Ï±ÑÌåÖ Í∏∞Î°ùÏùÑ Î™®Îëê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                            chatHistory = [];
                            localStorage.removeItem('aiChatHistory');
                            location.reload();
                        }
                    }
                </script>
            </body>
            </html>
        `;
    }
    
    /**
     * Í∞úÎ∞úÏûê Í∞ÄÏù¥Îìú ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
     */
    generateDeveloperGuidePage() {
        return `
            <!DOCTYPE html>
            <html lang="ko">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>üìö Í∞úÎ∞úÏûê Í∞ÄÏù¥Îìú - Sensor Game Hub</title>
                <style>
                    :root {
                        --primary: #3b82f6;
                        --secondary: #8b5cf6;
                        --success: #10b981;
                        --background: #0f172a;
                        --surface: #1e293b;
                        --text-primary: #f8fafc;
                        --text-secondary: #cbd5e1;
                        --border: #475569;
                    }
                    
                    * {
                        margin: 0;
                        padding: 0;
                        box-sizing: border-box;
                    }
                    
                    body {
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        background: var(--background);
                        color: var(--text-primary);
                        line-height: 1.6;
                    }
                    
                    .header {
                        background: var(--surface);
                        border-bottom: 1px solid var(--border);
                        padding: 1rem 2rem;
                        position: sticky;
                        top: 0;
                        z-index: 100;
                    }
                    
                    .header h1 {
                        background: linear-gradient(135deg, var(--primary), var(--secondary));
                        -webkit-background-clip: text;
                        -webkit-text-fill-color: transparent;
                        background-clip: text;
                    }
                    
                    .nav-links {
                        margin-top: 1rem;
                        display: flex;
                        gap: 1rem;
                    }
                    
                    .nav-link {
                        color: var(--text-secondary);
                        text-decoration: none;
                        padding: 0.5rem 1rem;
                        border-radius: 0.5rem;
                        transition: all 0.3s ease;
                    }
                    
                    .nav-link:hover {
                        background: rgba(59, 130, 246, 0.1);
                        color: var(--primary);
                    }
                    
                    .container {
                        max-width: 1200px;
                        margin: 0 auto;
                        padding: 2rem;
                    }
                    
                    .guide-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                        gap: 2rem;
                        margin-top: 2rem;
                    }
                    
                    .guide-card {
                        background: var(--surface);
                        border: 1px solid var(--border);
                        border-radius: 1rem;
                        padding: 2rem;
                        transition: all 0.3s ease;
                    }
                    
                    .guide-card:hover {
                        transform: translateY(-8px);
                        border-color: var(--primary);
                        box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
                    }
                    
                    .guide-card h3 {
                        color: var(--primary);
                        margin-bottom: 1rem;
                        font-size: 1.5rem;
                    }
                    
                    .guide-card p {
                        color: var(--text-secondary);
                        margin-bottom: 1.5rem;
                    }
                    
                    .guide-links {
                        display: flex;
                        flex-direction: column;
                        gap: 0.5rem;
                    }
                    
                    .guide-link {
                        color: var(--success);
                        text-decoration: none;
                        padding: 0.5rem;
                        border-radius: 0.5rem;
                        transition: all 0.3s ease;
                        display: flex;
                        align-items: center;
                        gap: 0.5rem;
                    }
                    
                    .guide-link:hover {
                        background: rgba(16, 185, 129, 0.1);
                    }
                    
                    .ai-promote {
                        background: linear-gradient(135deg, var(--primary), var(--secondary));
                        border-radius: 1rem;
                        padding: 2rem;
                        text-align: center;
                        margin: 2rem 0;
                    }
                    
                    .ai-promote h2 {
                        color: white;
                        margin-bottom: 1rem;
                    }
                    
                    .ai-promote p {
                        color: rgba(255, 255, 255, 0.9);
                        margin-bottom: 1.5rem;
                    }
                    
                    .ai-btn {
                        background: white;
                        color: var(--primary);
                        padding: 1rem 2rem;
                        border-radius: 0.75rem;
                        text-decoration: none;
                        font-weight: 600;
                        display: inline-block;
                        transition: all 0.3s ease;
                    }
                    
                    .ai-btn:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 4px 12px rgba(255, 255, 255, 0.3);
                    }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>üìö Í∞úÎ∞úÏûê Í∞ÄÏù¥Îìú</h1>
                    <div class="nav-links">
                        <a href="/ai-assistant" class="nav-link">ü§ñ AI Ï±ÑÌåÖ</a>
                        <a href="/" class="nav-link">üè† ÌôàÏúºÎ°ú</a>
                    </div>
                </div>
                
                <div class="container">
                    <div class="ai-promote">
                        <h2>üéØ ÏÉàÎ°úÏö¥ ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞!</h2>
                        <p>AIÏôÄ ÎåÄÌôîÌïòÎ©∞ ÏôÑÎ≤ΩÌïú ÏÑºÏÑú Í≤åÏûÑÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî. Îã®Í≥ÑÎ≥Ñ ÎåÄÌôîÎ•º ÌÜµÌï¥ Ï†ïÌôïÌïòÍ≥† Ïã§Ìñâ Í∞ÄÎä•Ìïú Í≤åÏûÑÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.</p>
                        <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap; margin-top: 1rem;">
                            <a href="/interactive-game-generator" class="ai-btn">üéÆ ÎåÄÌôîÌòï Í≤åÏûÑ ÏÉùÏÑ±Í∏∞</a>
                            <a href="/ai-assistant" class="ai-btn" style="background: rgba(255,255,255,0.2);">üí¨ AI Ï±ÑÌåÖ ÎèÑÏö∞ÎØ∏</a>
                        </div>
                    </div>
                    
                    <div class="guide-grid">
                        <div class="guide-card">
                            <h3>üöÄ Îπ†Î•∏ ÏãúÏûë</h3>
                            <p>Sensor Game HubÏóêÏÑú Ï≤´ Í≤åÏûÑÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.</p>
                            <div class="guide-links">
                                <a href="#" class="guide-link" onclick="openAIChat('üìã Í≤åÏûÑ ÌÖúÌîåÎ¶ø ÏÇ¨Ïö©Î≤ïÏóê ÎåÄÌï¥ÏÑú ÏïåÎ†§Ï£ºÏÑ∏Ïöî. GAME_TEMPLATE.htmlÏùÑ ÏÇ¨Ïö©Ìï¥ÏÑú ÏÉà Í≤åÏûÑÏùÑ ÎßåÎìúÎäî Í≥ºÏ†ïÏùÑ Îã®Í≥ÑÎ≥ÑÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.')">üìã Í≤åÏûÑ ÌÖúÌîåÎ¶ø ÏÇ¨Ïö©Î≤ï</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üîß SessionSDK Í∏∞Î≥∏ ÏÇ¨Ïö©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. ÏÑ∏ÏÖò ÏÉùÏÑ±, ÏÑºÏÑú Ïó∞Í≤∞, Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ Î∞©Î≤ïÏùÑ ÏòàÏ†ú ÏΩîÎìúÏôÄ Ìï®Íªò ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.')">üîß SessionSDK Í∏∞Î≥∏ ÏÇ¨Ïö©Î≤ï</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üì± ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. orientation, acceleration, rotationRate Îç∞Ïù¥ÌÑ∞Î•º Í≤åÏûÑÏóêÏÑú Ïñ¥ÎñªÍ≤å ÌôúÏö©ÌïòÎäîÏßÄ Ïã§Ï†ú ÏòàÏ†úÎ°ú Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.')">üì± ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨Î≤ï</a>
                            </div>
                        </div>
                        
                        <div class="guide-card">
                            <h3>üéÆ Í≤åÏûÑ ÌÉÄÏûÖ</h3>
                            <p>Îã§ÏñëÌïú Í≤åÏûÑ ÌÉÄÏûÖÍ≥º ÌäπÏßïÏùÑ ÏïåÏïÑÎ≥¥ÏÑ∏Ïöî.</p>
                            <div class="guide-links">
                                <a href="#" class="guide-link" onclick="openAIChat('üéØ ÏÜîÎ°ú Í≤åÏûÑ (1Î™Ö) Í∞úÎ∞ú Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. gameType: soloÎ°ú ÏÑ§Ï†ïÌïòÍ≥†, 1Í∞ú ÏÑºÏÑúÎ°ú ÌîåÎ†àÏù¥ÌïòÎäî Í≤åÏûÑÏùò ÌäπÏßïÍ≥º Íµ¨ÌòÑ Î∞©Î≤ïÏùÑ ÏòàÏ†úÏôÄ Ìï®Íªò ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.')">üéØ ÏÜîÎ°ú Í≤åÏûÑ (1Î™Ö)</a>
                                <a href="#" class="guide-link" onclick="openAIChat('ü§ù ÎìÄÏñº Í≤åÏûÑ (2Î™Ö ÌòëÎ†•) Í∞úÎ∞ú Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. gameType: dualÎ°ú ÏÑ§Ï†ïÌïòÍ≥†, 2Í∞ú ÏÑºÏÑúÍ∞Ä ÌòëÎ†•ÌïòÎäî Í≤åÏûÑ Î°úÏßÅÍ≥º ÏÑºÏÑú ÏãùÎ≥Ñ Î∞©Î≤ïÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏïåÎ†§Ï£ºÏÑ∏Ïöî.')">ü§ù ÎìÄÏñº Í≤åÏûÑ (2Î™Ö ÌòëÎ†•)</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üë• Î©ÄÌã∞ Í≤åÏûÑ (3-8Î™Ö Í≤ΩÏüÅ) Í∞úÎ∞ú Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. gameType: multiÎ°ú ÏÑ§Ï†ïÌïòÍ≥†, Ïó¨Îü¨ ÌîåÎ†àÏù¥Ïñ¥ Í∞Ñ Í≤ΩÏüÅ ÏãúÏä§ÌÖúÍ≥º Ïã§ÏãúÍ∞Ñ ÏàúÏúÑ ÏóÖÎç∞Ïù¥Ìä∏ Î∞©Î≤ïÏùÑ ÏòàÏ†úÎ°ú Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.')">üë• Î©ÄÌã∞ Í≤åÏûÑ (3-8Î™Ö Í≤ΩÏüÅ)</a>
                            </div>
                        </div>
                        
                        <div class="guide-card">
                            <h3>üì± ÏÑºÏÑú ÌôúÏö©</h3>
                            <p>Î™®Î∞îÏùº ÏÑºÏÑúÎ•º Í≤åÏûÑÏóê Ìö®Í≥ºÏ†ÅÏúºÎ°ú ÌôúÏö©ÌïòÎäî Î∞©Î≤ïÏûÖÎãàÎã§.</p>
                            <div class="guide-links">
                                <a href="#" class="guide-link" onclick="openAIChat('üìê Í∏∞Ïö∏Í∏∞ ÏÑºÏÑú (orientation) ÏÇ¨Ïö©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. alpha, beta, gamma Í∞íÏùò ÏùòÎØ∏ÏôÄ Î≤îÏúÑ, Í≤åÏûÑÏóêÏÑú Í∏∞Ïö∏Í∏∞Î•º Ïù¥Ïö©Ìïú Ï∫êÎ¶≠ÌÑ∞ Ïù¥ÎèôÍ≥º Ï°∞Ïûë Î∞©Î≤ïÏùÑ Ïã§Ï†ú ÏΩîÎìúÎ°ú Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.')">üìê Í∏∞Ïö∏Í∏∞ ÏÑºÏÑú (orientation)</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üèÉ Í∞ÄÏÜçÎèÑ ÏÑºÏÑú (acceleration) ÏÇ¨Ïö©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. x, y, z Ï∂ï Í∞ÄÏÜçÎèÑ Îç∞Ïù¥ÌÑ∞Î•º Ïù¥Ïö©Ìïú ÌùîÎì§Í∏∞, ÌÑ∞Ïπò, Ï†êÌîÑ ÎèôÏûë Í∞êÏßÄ Î∞©Î≤ïÍ≥º Ïã§Ï†ú Íµ¨ÌòÑ ÏòàÏ†úÎ•º Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.')">üèÉ Í∞ÄÏÜçÎèÑ ÏÑºÏÑú (acceleration)</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üîÑ ÌöåÏ†Ñ ÏÜçÎèÑ (rotationRate) ÏÇ¨Ïö©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. alpha, beta, gamma ÌöåÏ†Ñ ÏÜçÎèÑÎ•º Ïù¥Ïö©Ìïú Ïä§ÌïÄ, ÌöåÏ†Ñ ÎèôÏûë Í∞êÏßÄÏôÄ Í≤åÏûÑÏóêÏÑúÏùò ÌôúÏö© Î∞©Î≤ïÏùÑ ÏòàÏ†úÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.')">üîÑ ÌöåÏ†Ñ ÏÜçÎèÑ (rotationRate)</a>
                            </div>
                        </div>
                        
                        <div class="guide-card">
                            <h3>üêõ Î¨∏Ï†ú Ìï¥Í≤∞</h3>
                            <p>ÏùºÎ∞òÏ†ÅÏù∏ Í∞úÎ∞ú Ïù¥ÏäàÏôÄ Ìï¥Í≤∞ Î∞©Î≤ïÏûÖÎãàÎã§.</p>
                            <div class="guide-links">
                                <a href="#" class="guide-link" onclick="openAIChat('üîå Ïó∞Í≤∞ Ïò§Î•ò Ìï¥Í≤∞ Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. \"ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§\" Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏùÑ Îïå Ï≤¥ÌÅ¨Ìï¥Ïïº Ìï† ÏÇ¨Ìï≠Îì§Í≥º Ìï¥Í≤∞ Î∞©Î≤ïÏùÑ Îã®Í≥ÑÎ≥ÑÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.')">üîå Ïó∞Í≤∞ Ïò§Î•ò Ìï¥Í≤∞</a>
                                <a href="#" class="guide-link" onclick="openAIChat('‚ùì undefined Ïò§Î•ò Ìï¥Í≤∞ Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. ÏÑ∏ÏÖò ÏΩîÎìúÎÇò ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞Í∞Ä undefinedÎ°ú ÎÇòÏò§Îäî Î¨∏Ï†úÏùò ÏõêÏù∏Í≥º Ìï¥Í≤∞Ï±ÖÏùÑ CustomEvent Ï≤òÎ¶¨ Ìå®ÌÑ¥Í≥º Ìï®Íªò ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.')">‚ùì undefined Ïò§Î•ò</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üì° ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Î¨∏Ï†ú Ìï¥Í≤∞ Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞Í∞Ä Ïò§ÏßÄ ÏïäÍ±∞ÎÇò Î∂ÄÏ†ïÌôïÌï† ÎïåÏùò ÏõêÏù∏ ÏßÑÎã®Í≥º Ìï¥Í≤∞ Î∞©Î≤ï, ÏÑºÏÑú Í∂åÌïú ÏÑ§Ï†ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî.')">üì° ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Î¨∏Ï†ú</a>
                            </div>
                        </div>
                        
                        <div class="guide-card">
                            <h3>üé® UI/UX ÎîîÏûêÏù∏</h3>
                            <p>Í≤åÏûÑ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î•º Î©ãÏßÄÍ≤å Íæ∏ÎØ∏Îäî Î∞©Î≤ïÏûÖÎãàÎã§.</p>
                            <div class="guide-links">
                                <a href="#" class="guide-link" onclick="openAIChat('üé® UI ÎîîÏûêÏù∏ Í∞ÄÏù¥ÎìúÎ•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî. Í≤åÏûÑ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÏÑ§Í≥Ñ ÏõêÏπô, ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†ÅÏù∏ Î≤ÑÌäºÍ≥º ÏïÑÏù¥ÏΩò Î∞∞Ïπò, ÏãúÍ∞ÅÏ†Å ÌîºÎìúÎ∞± Íµ¨ÌòÑ Î∞©Î≤ïÏùÑ Ïã§Ï†ú ÏòàÏ†úÎ°ú Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.')">üé® UI ÎîîÏûêÏù∏ Í∞ÄÏù¥Îìú</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üåà ÌÖåÎßà Î≥ÄÏàò ÌôúÏö© Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. --primary, --secondary, --success Îì± CSS Ïª§Ïä§ÌÖÄ ÏÜçÏÑ±ÏùÑ ÌôúÏö©Ìïú ÏùºÍ¥ÄÎêú ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú Íµ¨Ï∂ïÍ≥º Îã§ÌÅ¨/ÎùºÏù¥Ìä∏ ÌÖåÎßà Íµ¨ÌòÑÏùÑ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.')">üåà ÌÖåÎßà Î≥ÄÏàò ÌôúÏö©</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üì± Î∞òÏùëÌòï ÎîîÏûêÏù∏ Íµ¨ÌòÑ Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. Îã§ÏñëÌïú Î™®Î∞îÏùº ÌôîÎ©¥ ÌÅ¨Í∏∞Ïóê ÎåÄÏùëÌïòÎäî Í≤åÏûÑ UI ÏÑ§Í≥ÑÏôÄ ÎØ∏ÎîîÏñ¥ ÏøºÎ¶¨, Flexbox/Grid ÌôúÏö©Î≤ïÏùÑ ÏòàÏ†úÎ°ú Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.')">üì± Î∞òÏùëÌòï ÎîîÏûêÏù∏</a>
                            </div>
                        </div>
                        
                        <div class="guide-card">
                            <h3>‚ö° ÏÑ±Îä• ÏµúÏ†ÅÌôî</h3>
                            <p>Í≤åÏûÑ ÏÑ±Îä•ÏùÑ Ìñ•ÏÉÅÏãúÌÇ§Îäî ÌåÅÍ≥º Í∏∞Î≤ïÏûÖÎãàÎã§.</p>
                            <div class="guide-links">
                                <a href="#" class="guide-link" onclick="openAIChat('üöÄ ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏµúÏ†ÅÌôî Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. throttlingÍ≥º debouncingÏùÑ ÌôúÏö©Ìïú ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° ÎπàÎèÑ Ï†úÏñ¥, Î∞∞ÌÑ∞Î¶¨ Ìö®Ïú®ÏÑ± Í∞úÏÑ† Î∞©Î≤ïÏùÑ ÏΩîÎìú ÏòàÏ†úÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.')">üöÄ ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏµúÏ†ÅÌôî</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üñºÔ∏è Î†åÎçîÎßÅ ÏµúÏ†ÅÌôî Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. Canvas ÏÑ±Îä• Ìñ•ÏÉÅÏùÑ ÏúÑÌïú ÎçîÎ∏î Î≤ÑÌçºÎßÅ, requestAnimationFrame ÌôúÏö©, Î∂àÌïÑÏöîÌïú Î†åÎçîÎßÅ Î∞©ÏßÄ Í∏∞Î≤ïÏùÑ Ïã§Ï†ú Íµ¨ÌòÑÏúºÎ°ú Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.')">üñºÔ∏è Î†åÎçîÎßÅ ÏµúÏ†ÅÌôî</a>
                                <a href="#" class="guide-link" onclick="openAIChat('üß† Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨ Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. Í≤åÏûÑÏóêÏÑú Î∞úÏÉùÌï† Ïàò ÏûàÎäî Î©îÎ™®Î¶¨ ÎàÑÏàò Ìå®ÌÑ¥Í≥º ÏòàÎ∞©Î≤ï, Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨, ÌÉÄÏù¥Î®∏ Ìï¥Ï†ú Îì±ÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.')">üß† Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨</a>
                            </div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 3rem; padding: 2rem; background: var(--surface); border-radius: 1rem; text-align: center;">
                        <h3 style="color: var(--success); margin-bottom: 1rem;">üìä API ÏóîÎìúÌè¨Ïù∏Ìä∏</h3>
                        <p style="color: var(--text-secondary); margin-bottom: 1rem;">Í∞úÎ∞úÏóê Ïú†Ïö©Ìïú APIÎì§</p>
                        <div style="display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;">
                            <a href="/api/games" style="color: var(--success); text-decoration: none; padding: 0.5rem 1rem; background: rgba(16, 185, 129, 0.1); border-radius: 0.5rem;">/api/games</a>
                            <a href="/api/ai/health" style="color: var(--success); text-decoration: none; padding: 0.5rem 1rem; background: rgba(16, 185, 129, 0.1); border-radius: 0.5rem;">/api/ai/health</a>
                            <a href="/api/stats" style="color: var(--success); text-decoration: none; padding: 0.5rem 1rem; background: rgba(16, 185, 129, 0.1); border-radius: 0.5rem;">/api/stats</a>
                        </div>
                    </div>
                </div>
                
                <script>
                    function openAIChat(question) {
                        // AI Ï±ÑÌåÖ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïòÎ©¥ÏÑú ÏßàÎ¨∏ÏùÑ URL ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï†ÑÎã¨
                        const encodedQuestion = encodeURIComponent(question);
                        window.location.href = \`/ai-assistant?q=\${encodedQuestion}\`;
                    }
                </script>
            </body>
            </html>
        `;
    }
    
    /**
     * Socket.IO Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
     */
    setupSocketHandlers() {
        this.io.on('connection', (socket) => {
            console.log(`üîå ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞: ${socket.id} (${socket.handshake.address})`);
            
            // Í≤åÏûÑ ÏÑ∏ÏÖò ÏÉùÏÑ± (Í≤åÏûÑÏóêÏÑú Ìò∏Ï∂ú)
            socket.on('create-session', (data, callback) => {
                try {
                    console.log(`üîç create-session Ïù¥Î≤§Ìä∏ ÏàòÏã†:`, data);
                    const { gameId, gameType } = data;
                    
                    if (!gameId || !gameType) {
                        throw new Error('gameIdÏôÄ gameTypeÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
                    }
                    
                    const session = this.sessionManager.createSession(
                        gameId,
                        gameType,
                        socket.id,
                        socket.handshake.address
                    );
                    
                    console.log(`üîç SessionManagerÏóêÏÑú Î∞òÌôòÎ∞õÏùÄ ÏÑ∏ÏÖò:`, session);
                    console.log(`üîç Î∞òÌôòÎ∞õÏùÄ sessionCode: "${session.sessionCode}" (ÌÉÄÏûÖ: ${typeof session.sessionCode})`);
                    
                    const responseData = {
                        success: true,
                        session: session
                    };
                    
                    console.log(`üîç ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê Ï†ÑÏÜ°Ìï† ÏùëÎãµ:`, responseData);
                    
                    // Í≤åÏûÑ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê ÏÑ∏ÏÖò Ï†ïÎ≥¥ Ï†ÑÏÜ°
                    callback(responseData);
                    
                    console.log(`üéÆ ÏÑ∏ÏÖò ÏÉùÏÑ±Îê®: ${session.sessionCode} for ${gameId}`);
                    
                } catch (error) {
                    console.error(`‚ùå ÏÑ∏ÏÖò ÏÉùÏÑ± Ïã§Ìå®:`, error.message);
                    callback({
                        success: false,
                        error: error.message
                    });
                }
            });
            
            // ÏÑºÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ (Î™®Î∞îÏùºÏóêÏÑú Ìò∏Ï∂ú)
            socket.on('connect-sensor', (data, callback) => {
                try {
                    const { sessionCode, deviceInfo } = data;
                    
                    if (!sessionCode) {
                        throw new Error('ÏÑ∏ÏÖò ÏΩîÎìúÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');
                    }
                    
                    const result = this.sessionManager.connectSensor(
                        sessionCode,
                        socket.id,
                        socket.handshake.address,
                        deviceInfo
                    );
                    
                    // ÏÑºÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê Ïó∞Í≤∞ ÌôïÏù∏
                    callback({
                        success: true,
                        connection: result
                    });
                    
                    // Í≤åÏûÑ Ìò∏Ïä§Ìä∏Ïóê ÏÑºÏÑú Ïó∞Í≤∞ ÏïåÎ¶º
                    const session = this.sessionManager.getSession(result.sessionId);
                    socket.to(session.host.socketId).emit('sensor-connected', {
                        sensorId: result.sensorId,
                        gameType: session.gameType,
                        connectedSensors: result.connectedSensors,
                        maxSensors: result.maxSensors,
                        isReady: result.isReady
                    });
                    
                    // Î™®Îì† ÏÑºÏÑúÍ∞Ä Ïó∞Í≤∞ÎêòÎ©¥ Í≤åÏûÑ Ï§ÄÎπÑ ÏôÑÎ£å ÏïåÎ¶º
                    if (result.isReady) {
                        socket.to(session.host.socketId).emit('game-ready', {
                            sessionId: result.sessionId,
                            gameType: session.gameType,
                            connectedSensors: Array.from(session.sensors.keys())
                        });
                    }
                    
                    console.log(`üì± ÏÑºÏÑú Ïó∞Í≤∞Îê®: ${result.sensorId} ‚Üí ${sessionCode}`);
                    
                } catch (error) {
                    console.error(`‚ùå ÏÑºÏÑú Ïó∞Í≤∞ Ïã§Ìå®:`, error.message);
                    callback({
                        success: false,
                        error: error.message
                    });
                }
            });
            
            // ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏàòÏã† (Î™®Î∞îÏùºÏóêÏÑú Ìò∏Ï∂ú)
            socket.on('sensor-data', (data) => {
                try {
                    const { sessionCode, sensorId, sensorData } = data;
                    
                    const result = this.sessionManager.updateSensorData(
                        sessionCode,
                        sensorId,
                        sensorData
                    );
                    
                    // Í≤åÏûÑ Ìò∏Ïä§Ìä∏Ïóê ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
                    socket.to(result.hostSocketId).emit('sensor-update', result.sensorData);
                    
                } catch (error) {
                    console.error(`‚ùå ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ïã§Ìå®:`, error.message);
                    socket.emit('sensor-error', { error: error.message });
                }
            });
            
            // Í≤åÏûÑ ÏãúÏûë (Í≤åÏûÑÏóêÏÑú Ìò∏Ï∂ú)
            socket.on('start-game', (data, callback) => {
                try {
                    const { sessionId } = data;
                    
                    const gameInfo = this.sessionManager.startGame(sessionId);
                    
                    callback({
                        success: true,
                        game: gameInfo
                    });
                    
                    // Î™®Îì† ÏÑºÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê Í≤åÏûÑ ÏãúÏûë ÏïåÎ¶º
                    const session = this.sessionManager.getSession(sessionId);
                    for (const sensor of session.sensors.values()) {
                        socket.to(sensor.socketId).emit('game-started', {
                            gameType: session.gameType,
                            sensorId: sensor.id
                        });
                    }
                    
                    console.log(`üéÆ Í≤åÏûÑ ÏãúÏûë: ${session.code}`);
                    
                } catch (error) {
                    console.error(`‚ùå Í≤åÏûÑ ÏãúÏûë Ïã§Ìå®:`, error.message);
                    callback({
                        success: false,
                        error: error.message
                    });
                }
            });
            
            // Ïó∞Í≤∞ Ìï¥Ï†ú Ï≤òÎ¶¨
            socket.on('disconnect', () => {
                console.log(`üîå ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ìï¥Ï†ú: ${socket.id}`);
                
                const disconnections = this.sessionManager.disconnect(socket.id);
                
                // Ïó∞Í≤∞ Ìï¥Ï†ú ÏïåÎ¶º Ï†ÑÏÜ°
                disconnections.forEach(disconnection => {
                    if (disconnection.type === 'host_disconnected') {
                        // Î™®Îì† ÏÑºÏÑúÏóê Ìò∏Ïä§Ìä∏ Ïó∞Í≤∞ Ìï¥Ï†ú ÏïåÎ¶º
                        disconnection.affectedSensors.forEach(sensorId => {
                            this.io.emit('host-disconnected', { sessionId: disconnection.sessionId });
                        });
                    } else if (disconnection.type === 'sensor_disconnected') {
                        // Ìò∏Ïä§Ìä∏Ïóê ÏÑºÏÑú Ïó∞Í≤∞ Ìï¥Ï†ú ÏïåÎ¶º
                        socket.to(disconnection.hostSocketId).emit('sensor-disconnected', {
                            sensorId: disconnection.sensorId,
                            remainingSensors: disconnection.remainingSensors
                        });
                    }
                });
            });
            
            // Ìïë ÏùëÎãµ
            socket.on('ping', (callback) => {
                if (callback) callback({ pong: Date.now() });
            });
        });
    }
    
    /**
     * ÏÑúÎ≤Ñ ÏãúÏûë
     */
    start() {
        this.server.listen(this.port, () => {
            console.log(`üöÄ Sensor Game Hub v6.0 ÏÑúÎ≤Ñ ÏãúÏûë`);
            console.log(`üìç Ìè¨Ìä∏: ${this.port}`);
            console.log(`üåê URL: http://localhost:${this.port}`);
            console.log(`üì± ÏÑºÏÑú: http://localhost:${this.port}/sensor.html`);
            console.log(`üéÆ Í≤åÏûÑ: http://localhost:${this.port}/games/[solo|dual|multi]`);
        });
    }
    
    /**
     * Í≤åÏûÑ Ïû¨Ïä§Ï∫î (ÎÇ¥Î∂Ä ÏÇ¨Ïö©)
     */
    async rescanGames() {
        try {
            console.log('üîÑ Í≤åÏûÑ Ïû¨Ïä§Ï∫î ÏãúÏûë...');
            await this.gameScanner.scanGames();
            console.log('‚úÖ Í≤åÏûÑ Ïû¨Ïä§Ï∫î ÏôÑÎ£å');
            return {
                success: true,
                stats: this.gameScanner.getStats()
            };
        } catch (error) {
            console.error('‚ùå Í≤åÏûÑ Ïû¨Ïä§Ï∫î Ïã§Ìå®:', error);
            throw error;
        }
    }

    /**
     * ÏÑúÎ≤Ñ Ï¢ÖÎ£å
     */
    stop() {
        this.server.close(() => {
            console.log('üõë ÏÑúÎ≤ÑÍ∞Ä Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.');
        });
    }
}

// ÏÑúÎ≤Ñ ÏãúÏûë
const server = new GameServer();
server.start();

// Ïö∞ÏïÑÌïú Ï¢ÖÎ£å Ï≤òÎ¶¨
process.on('SIGTERM', () => {
    console.log('üõë SIGTERM Ïã†Ìò∏ ÏàòÏã†, ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ï§ë...');
    server.stop();
});

process.on('SIGINT', () => {
    console.log('üõë SIGINT Ïã†Ìò∏ ÏàòÏã†, ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ï§ë...');
    server.stop();
    process.exit(0);
});

module.exports = GameServer;